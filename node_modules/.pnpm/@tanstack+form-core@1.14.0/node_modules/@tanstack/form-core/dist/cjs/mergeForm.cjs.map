{"version":3,"file":"mergeForm.cjs","sources":["../../src/mergeForm.ts"],"sourcesContent":["import type { FormApi } from './FormApi'\n\nfunction isValidKey(key: string | number | symbol): boolean {\n  const dangerousProps = ['__proto__', 'constructor', 'prototype']\n  return !dangerousProps.includes(String(key))\n}\n\n/**\n * @private\n */\nexport function mutateMergeDeep(\n  target: object | null | undefined,\n  source: object | null | undefined,\n): object {\n  // Early return if either is not an object\n  if (target === null || target === undefined || typeof target !== 'object')\n    return {} as object\n  if (source === null || source === undefined || typeof source !== 'object')\n    return target\n\n  const targetKeys = Object.keys(target)\n  const sourceKeys = Object.keys(source)\n  const keySet = new Set([...targetKeys, ...sourceKeys])\n\n  for (const key of keySet) {\n    if (!isValidKey(key)) continue\n\n    const targetKey = key as keyof typeof target\n    const sourceKey = key as keyof typeof source\n\n    if (!Object.hasOwn(source, sourceKey)) continue\n\n    const sourceValue = source[sourceKey] as unknown\n    const targetValue = target[targetKey] as unknown\n\n    // Handle arrays\n    if (Array.isArray(targetValue) && Array.isArray(sourceValue)) {\n      Object.defineProperty(target, key, {\n        value: [...sourceValue],\n        enumerable: true,\n        writable: true,\n        configurable: true,\n      })\n      continue\n    }\n\n    // Handle nested objects (type assertion to satisfy ESLint)\n    const isTargetObj = typeof targetValue === 'object' && targetValue !== null\n    const isSourceObj = typeof sourceValue === 'object' && sourceValue !== null\n    const areObjects =\n      isTargetObj &&\n      isSourceObj &&\n      !Array.isArray(targetValue) &&\n      !Array.isArray(sourceValue)\n\n    if (areObjects) {\n      mutateMergeDeep(targetValue as object, sourceValue as object)\n      continue\n    }\n\n    // Handle all other cases\n    Object.defineProperty(target, key, {\n      value: sourceValue,\n      enumerable: true,\n      writable: true,\n      configurable: true,\n    })\n  }\n\n  return target\n}\n\nexport function mergeForm<TFormData>(\n  baseForm: FormApi<\n    NoInfer<TFormData>,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any,\n    any\n  >,\n  state: Partial<\n    FormApi<TFormData, any, any, any, any, any, any, any, any, any>['state']\n  >,\n) {\n  mutateMergeDeep(baseForm.state, state)\n  return baseForm\n}\n"],"names":[],"mappings":";;AAEA,SAAS,WAAW,KAAwC;AAC1D,QAAM,iBAAiB,CAAC,aAAa,eAAe,WAAW;AAC/D,SAAO,CAAC,eAAe,SAAS,OAAO,GAAG,CAAC;AAC7C;AAKgB,SAAA,gBACd,QACA,QACQ;AAER,MAAI,WAAW,QAAQ,WAAW,UAAa,OAAO,WAAW;AAC/D,WAAO,CAAC;AACV,MAAI,WAAW,QAAQ,WAAW,UAAa,OAAO,WAAW;AACxD,WAAA;AAEH,QAAA,aAAa,OAAO,KAAK,MAAM;AAC/B,QAAA,aAAa,OAAO,KAAK,MAAM;AAC/B,QAAA,6BAAa,IAAI,CAAC,GAAG,YAAY,GAAG,UAAU,CAAC;AAErD,aAAW,OAAO,QAAQ;AACpB,QAAA,CAAC,WAAW,GAAG,EAAG;AAEtB,UAAM,YAAY;AAClB,UAAM,YAAY;AAElB,QAAI,CAAC,OAAO,OAAO,QAAQ,SAAS,EAAG;AAEjC,UAAA,cAAc,OAAO,SAAS;AAC9B,UAAA,cAAc,OAAO,SAAS;AAGpC,QAAI,MAAM,QAAQ,WAAW,KAAK,MAAM,QAAQ,WAAW,GAAG;AACrD,aAAA,eAAe,QAAQ,KAAK;AAAA,QACjC,OAAO,CAAC,GAAG,WAAW;AAAA,QACtB,YAAY;AAAA,QACZ,UAAU;AAAA,QACV,cAAc;AAAA,MAAA,CACf;AACD;AAAA,IAAA;AAIF,UAAM,cAAc,OAAO,gBAAgB,YAAY,gBAAgB;AACvE,UAAM,cAAc,OAAO,gBAAgB,YAAY,gBAAgB;AACjE,UAAA,aACJ,eACA,eACA,CAAC,MAAM,QAAQ,WAAW,KAC1B,CAAC,MAAM,QAAQ,WAAW;AAE5B,QAAI,YAAY;AACd,sBAAgB,aAAuB,WAAqB;AAC5D;AAAA,IAAA;AAIK,WAAA,eAAe,QAAQ,KAAK;AAAA,MACjC,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,cAAc;AAAA,IAAA,CACf;AAAA,EAAA;AAGI,SAAA;AACT;AAEgB,SAAA,UACd,UAYA,OAGA;AACgB,kBAAA,SAAS,OAAO,KAAK;AAC9B,SAAA;AACT;;;"}