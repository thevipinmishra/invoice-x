"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PARENT_CHECKBOX = void 0;
exports.useCheckboxRoot = useCheckboxRoot;
var React = _interopRequireWildcard(require("react"));
var _useControlled = require("../../utils/useControlled");
var _visuallyHidden = require("../../utils/visuallyHidden");
var _useForkRef = require("../../utils/useForkRef");
var _mergeProps = require("../../merge-props");
var _useBaseUiId = require("../../utils/useBaseUiId");
var _useEventCallback = require("../../utils/useEventCallback");
var _useModernLayoutEffect = require("../../utils/useModernLayoutEffect");
var _useButton = require("../../use-button/useButton");
var _FieldRootContext = require("../../field/root/FieldRootContext");
var _useFieldControlValidation = require("../../field/control/useFieldControlValidation");
var _useField = require("../../field/useField");
var _CheckboxGroupContext = require("../../checkbox-group/CheckboxGroupContext");
var _FormContext = require("../../form/FormContext");
const EMPTY = {};
const PARENT_CHECKBOX = exports.PARENT_CHECKBOX = 'data-parent';
function useCheckboxRoot(params) {
  const {
    id: idProp,
    checked: externalChecked,
    inputRef: externalInputRef,
    onCheckedChange: onCheckedChangeProp,
    name: nameProp,
    value: valueProp,
    defaultChecked = false,
    readOnly = false,
    required = false,
    indeterminate = false,
    parent = false,
    disabled: disabledProp = false
  } = params;
  const buttonRef = React.useRef(null);
  const groupContext = (0, _CheckboxGroupContext.useCheckboxGroupContext)();
  const groupValue = groupContext?.value;
  const setGroupValue = groupContext?.setValue;
  const defaultGroupValue = groupContext?.defaultValue;
  const {
    clearErrors
  } = (0, _FormContext.useFormContext)();
  const {
    labelId,
    setControlId,
    setTouched,
    setDirty,
    validityData,
    setFilled,
    setFocused,
    validationMode,
    disabled: fieldDisabled,
    name: fieldName
  } = (0, _FieldRootContext.useFieldRootContext)();
  const disabled = fieldDisabled || disabledProp;
  const name = fieldName ?? nameProp;
  const value = valueProp ?? name;
  const {
    getButtonProps
  } = (0, _useButton.useButton)({
    disabled,
    buttonRef
  });
  const localFieldControlValidation = (0, _useFieldControlValidation.useFieldControlValidation)();
  const fieldControlValidation = groupContext?.fieldControlValidation ?? localFieldControlValidation;
  const [checked, setCheckedState] = (0, _useControlled.useControlled)({
    controlled: value && groupValue && !parent ? groupValue.includes(value) : externalChecked,
    default: value && defaultGroupValue && !parent ? defaultGroupValue.includes(value) : defaultChecked,
    name: 'Checkbox',
    state: 'checked'
  });
  const onCheckedChange = (0, _useEventCallback.useEventCallback)(onCheckedChangeProp);
  const id = (0, _useBaseUiId.useBaseUiId)(idProp);
  (0, _useModernLayoutEffect.useModernLayoutEffect)(() => {
    setControlId(id);
    return () => {
      setControlId(undefined);
    };
  }, [id, setControlId]);
  (0, _useField.useField)({
    enabled: !groupContext,
    id,
    commitValidation: fieldControlValidation.commitValidation,
    value: checked,
    controlRef: buttonRef
  });
  const inputRef = React.useRef(null);
  const mergedInputRef = (0, _useForkRef.useForkRef)(externalInputRef, inputRef, fieldControlValidation.inputRef);
  (0, _useModernLayoutEffect.useModernLayoutEffect)(() => {
    if (inputRef.current) {
      inputRef.current.indeterminate = indeterminate;
      if (checked) {
        setFilled(true);
      }
    }
  }, [checked, indeterminate, setFilled]);
  const getRootProps = React.useCallback((externalProps = {}) => (0, _mergeProps.mergeProps)({
    id,
    ref: buttonRef,
    role: 'checkbox',
    disabled,
    'aria-checked': indeterminate ? 'mixed' : checked,
    'aria-readonly': readOnly || undefined,
    'aria-required': required || undefined,
    'aria-labelledby': labelId,
    [PARENT_CHECKBOX]: parent ? '' : undefined,
    onFocus() {
      setFocused(true);
    },
    onBlur() {
      const element = inputRef.current;
      if (!element) {
        return;
      }
      setTouched(true);
      setFocused(false);
      if (validationMode === 'onBlur') {
        fieldControlValidation.commitValidation(groupContext ? groupValue : element.checked);
      }
    },
    onClick(event) {
      if (event.defaultPrevented || readOnly) {
        return;
      }
      event.preventDefault();
      inputRef.current?.click();
    }
  }, fieldControlValidation.getValidationProps(externalProps), getButtonProps), [getButtonProps, id, disabled, indeterminate, checked, readOnly, required, labelId, setFocused, setTouched, validationMode, groupContext, groupValue, fieldControlValidation, parent]);
  const getInputProps = React.useCallback((externalProps = {}) => (0, _mergeProps.mergeProps)({
    checked,
    disabled,
    name: parent ? undefined : name,
    // React <19 sets an empty value if `undefined` is passed explicitly
    // To avoid this, we only set the value if it's defined
    ...(valueProp !== undefined ? {
      value: (groupContext ? checked && valueProp : valueProp) || ''
    } : EMPTY),
    required,
    ref: mergedInputRef,
    style: _visuallyHidden.visuallyHidden,
    tabIndex: -1,
    type: 'checkbox',
    'aria-hidden': true,
    onChange(event) {
      // Workaround for https://github.com/facebook/react/issues/9023
      if (event.nativeEvent.defaultPrevented) {
        return;
      }
      const nextChecked = event.target.checked;
      setDirty(nextChecked !== validityData.initialValue);
      setCheckedState(nextChecked);
      onCheckedChange?.(nextChecked, event.nativeEvent);
      clearErrors(name);
      if (!groupContext) {
        setFilled(nextChecked);
        if (validationMode === 'onChange') {
          fieldControlValidation.commitValidation(nextChecked);
        } else {
          fieldControlValidation.commitValidation(nextChecked, true);
        }
      }
      if (value && groupValue && setGroupValue && !parent) {
        const nextGroupValue = nextChecked ? [...groupValue, value] : groupValue.filter(item => item !== value);
        setGroupValue(nextGroupValue, event.nativeEvent);
        setFilled(nextGroupValue.length > 0);
        if (validationMode === 'onChange') {
          fieldControlValidation.commitValidation(nextGroupValue);
        } else {
          fieldControlValidation.commitValidation(nextGroupValue, true);
        }
      }
    }
  }, groupContext ? fieldControlValidation.getValidationProps(externalProps) : fieldControlValidation.getInputValidationProps(externalProps)), [checked, disabled, name, valueProp, required, mergedInputRef, setDirty, validityData.initialValue, setCheckedState, onCheckedChange, clearErrors, groupContext, groupValue, setGroupValue, parent, setFilled, validationMode, value, fieldControlValidation]);
  return React.useMemo(() => ({
    checked,
    getRootProps,
    getInputProps
  }), [checked, getRootProps, getInputProps]);
}