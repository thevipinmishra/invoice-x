"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSelectPositioner = useSelectPositioner;
var React = _interopRequireWildcard(require("react"));
var _useAnchorPositioning = require("../../utils/useAnchorPositioning");
var _mergeProps = require("../../merge-props");
var _SelectRootContext = require("../root/SelectRootContext");
var _useScrollLock = require("../../utils/useScrollLock");
function useSelectPositioner(params) {
  const {
    alignItemWithTriggerActive
  } = params;
  const {
    open,
    mounted,
    triggerElement,
    modal
  } = (0, _SelectRootContext.useSelectRootContext)();
  (0, _useScrollLock.useScrollLock)({
    enabled: (alignItemWithTriggerActive || modal) && open,
    mounted,
    open,
    referenceElement: triggerElement
  });
  const positioning = (0, _useAnchorPositioning.useAnchorPositioning)({
    ...params,
    trackAnchor: params.trackAnchor ?? !alignItemWithTriggerActive
  });
  const positionerStyles = React.useMemo(() => alignItemWithTriggerActive ? {
    position: 'fixed'
  } : positioning.positionerStyles, [alignItemWithTriggerActive, positioning.positionerStyles]);
  const getPositionerProps = React.useCallback((externalProps = {}) => {
    const hiddenStyles = {};
    if (!open) {
      hiddenStyles.pointerEvents = 'none';
    }
    return (0, _mergeProps.mergeProps)({
      role: 'presentation',
      hidden: !mounted,
      style: {
        ...positionerStyles,
        ...hiddenStyles
      }
    }, externalProps);
  }, [open, mounted, positionerStyles]);
  return React.useMemo(() => ({
    ...positioning,
    side: alignItemWithTriggerActive ? 'none' : positioning.side,
    getPositionerProps
  }), [getPositionerProps, positioning, alignItemWithTriggerActive]);
}