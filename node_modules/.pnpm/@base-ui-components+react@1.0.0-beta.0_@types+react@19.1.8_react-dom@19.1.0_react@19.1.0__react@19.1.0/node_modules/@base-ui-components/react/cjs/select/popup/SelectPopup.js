"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectPopup = void 0;
var React = _interopRequireWildcard(require("react"));
var _react2 = require("@floating-ui/react");
var _SelectRootContext = require("../root/SelectRootContext");
var _popupStateMapping = require("../../utils/popupStateMapping");
var _useSelectPopup = require("./useSelectPopup");
var _SelectPositionerContext = require("../positioner/SelectPositionerContext");
var _styleHookMapping = require("../../utils/styleHookMapping");
var _useOpenChangeComplete = require("../../utils/useOpenChangeComplete");
var _useRenderElement = require("../../utils/useRenderElement");
var _jsxRuntime = require("react/jsx-runtime");
const customStyleHookMapping = {
  ..._popupStateMapping.popupStateMapping,
  ..._styleHookMapping.transitionStatusMapping
};

/**
 * A container for the select items.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Select](https://base-ui.com/react/components/select)
 */
const SelectPopup = exports.SelectPopup = /*#__PURE__*/React.forwardRef(function SelectPopup(componentProps, forwardedRef) {
  const {
    render,
    className,
    ...elementProps
  } = componentProps;
  const {
    id,
    open,
    popupRef,
    transitionStatus,
    mounted,
    onOpenChangeComplete,
    popupProps
  } = (0, _SelectRootContext.useSelectRootContext)();
  const positioner = (0, _SelectPositionerContext.useSelectPositionerContext)();
  (0, _useOpenChangeComplete.useOpenChangeComplete)({
    open,
    ref: popupRef,
    onComplete() {
      if (open) {
        onOpenChangeComplete?.(true);
      }
    }
  });
  const state = React.useMemo(() => ({
    open,
    transitionStatus,
    side: positioner.side,
    align: positioner.align
  }), [open, transitionStatus, positioner]);
  const {
    props
  } = (0, _useSelectPopup.useSelectPopup)();
  const element = (0, _useRenderElement.useRenderElement)('div', componentProps, {
    ref: [forwardedRef, popupRef],
    state,
    customStyleHookMapping,
    props: [popupProps, props, transitionStatus === 'starting' ? {
      style: {
        transition: 'none'
      }
    } : {}, elementProps]
  });
  const popupSelector = `[data-id="${id}-popup"]`;
  const html = React.useMemo(() => ({
    __html: `${popupSelector}{scrollbar-width:none}${popupSelector}::-webkit-scrollbar{display:none}`
  }), [popupSelector]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
    children: [id && positioner.alignItemWithTriggerActive && /*#__PURE__*/(0, _jsxRuntime.jsx)("style", {
      // eslint-disable-next-line react/no-danger
      dangerouslySetInnerHTML: html
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_react2.FloatingFocusManager, {
      context: positioner.context,
      modal: false,
      disabled: !mounted,
      restoreFocus: true,
      children: element
    })]
  });
});
if (process.env.NODE_ENV !== "production") SelectPopup.displayName = "SelectPopup";