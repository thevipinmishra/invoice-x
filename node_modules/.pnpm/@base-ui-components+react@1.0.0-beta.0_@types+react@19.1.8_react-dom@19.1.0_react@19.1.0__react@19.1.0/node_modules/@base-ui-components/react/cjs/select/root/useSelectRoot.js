"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSelectRoot = useSelectRoot;
var React = _interopRequireWildcard(require("react"));
var _react2 = require("@floating-ui/react");
var _useClick = require("../../utils/floating-ui/useClick");
var _useFieldControlValidation = require("../../field/control/useFieldControlValidation");
var _FieldRootContext = require("../../field/root/FieldRootContext");
var _useBaseUiId = require("../../utils/useBaseUiId");
var _useControlled = require("../../utils/useControlled");
var _utils = require("../../utils");
var _useModernLayoutEffect = require("../../utils/useModernLayoutEffect");
var _useEventCallback = require("../../utils/useEventCallback");
var _warn = require("../../utils/warn");
var _translateOpenChangeReason = require("../../utils/translateOpenChangeReason");
var _useOpenChangeComplete = require("../../utils/useOpenChangeComplete");
var _FormContext = require("../../form/FormContext");
var _useLatestRef = require("../../utils/useLatestRef");
var _useField = require("../../field/useField");
const EMPTY_ARRAY = [];
function useSelectRoot(params) {
  const {
    id: idProp,
    disabled: disabledProp = false,
    readOnly = false,
    required = false,
    modal = false,
    name: nameProp,
    onOpenChangeComplete
  } = params;
  const {
    clearErrors
  } = (0, _FormContext.useFormContext)();
  const {
    setDirty,
    validityData,
    validationMode,
    setControlId,
    setFilled,
    name: fieldName,
    disabled: fieldDisabled
  } = (0, _FieldRootContext.useFieldRootContext)();
  const fieldControlValidation = (0, _useFieldControlValidation.useFieldControlValidation)();
  const id = (0, _useBaseUiId.useBaseUiId)(idProp);
  const disabled = fieldDisabled || disabledProp;
  const name = fieldName ?? nameProp;
  (0, _useModernLayoutEffect.useModernLayoutEffect)(() => {
    setControlId(id);
    return () => {
      setControlId(undefined);
    };
  }, [id, setControlId]);
  const [value, setValueUnwrapped] = (0, _useControlled.useControlled)({
    controlled: params.value,
    default: params.defaultValue,
    name: 'Select',
    state: 'value'
  });
  const [open, setOpenUnwrapped] = (0, _useControlled.useControlled)({
    controlled: params.open,
    default: params.defaultOpen,
    name: 'Select',
    state: 'open'
  });
  const isValueControlled = params.value !== undefined;
  const listRef = React.useRef([]);
  const labelsRef = React.useRef([]);
  const popupRef = React.useRef(null);
  const valueRef = React.useRef(null);
  const valuesRef = React.useRef([]);
  const typingRef = React.useRef(false);
  const keyboardActiveRef = React.useRef(false);
  const selectedItemTextRef = React.useRef(null);
  const selectionRef = React.useRef({
    allowSelectedMouseUp: false,
    allowUnselectedMouseUp: false,
    allowSelect: false
  });
  const alignItemWithTriggerActiveRef = React.useRef(false);
  const [triggerElement, setTriggerElement] = React.useState(null);
  const [typeaheadReady, setTypeaheadReady] = React.useState(open);
  const [positionerElement, setPositionerElement] = React.useState(null);
  const [activeIndex, setActiveIndex] = React.useState(null);
  const [selectedIndex, setSelectedIndex] = React.useState(null);
  const [label, setLabel] = React.useState('');
  const [touchModality, setTouchModality] = React.useState(false);
  const {
    mounted,
    setMounted,
    transitionStatus
  } = (0, _utils.useTransitionStatus)(open);
  const controlRef = (0, _useLatestRef.useLatestRef)(triggerElement);
  const commitValidation = fieldControlValidation.commitValidation;
  const updateValue = (0, _useEventCallback.useEventCallback)(nextValue => {
    const index = valuesRef.current.indexOf(nextValue);
    setSelectedIndex(index === -1 ? null : index);
    setLabel(labelsRef.current[index] ?? '');
    clearErrors(name);
    setDirty(nextValue !== validityData.initialValue);
  });
  (0, _useField.useField)({
    id,
    commitValidation,
    value,
    controlRef
  });
  const prevValueRef = React.useRef(value);
  (0, _useModernLayoutEffect.useModernLayoutEffect)(() => {
    if (prevValueRef.current === value) {
      return;
    }
    clearErrors(name);
    commitValidation?.(value, true);
    if (validationMode === 'onChange') {
      commitValidation?.(value);
    }
  }, [value, commitValidation, clearErrors, name, validationMode]);
  (0, _useModernLayoutEffect.useModernLayoutEffect)(() => {
    setFilled(value !== null);
    if (prevValueRef.current !== value) {
      updateValue(value);
    }
  }, [setFilled, updateValue, value]);
  (0, _useModernLayoutEffect.useModernLayoutEffect)(() => {
    prevValueRef.current = value;
  }, [value]);
  const setOpen = (0, _useEventCallback.useEventCallback)((nextOpen, event, reason) => {
    params.onOpenChange?.(nextOpen, event, reason);
    setOpenUnwrapped(nextOpen);

    // Workaround `enableFocusInside` in Floating UI setting `tabindex=0` of a non-highlighted
    // option upon close when tabbing out due to `keepMounted=true`:
    // https://github.com/floating-ui/floating-ui/pull/3004/files#diff-962a7439cdeb09ea98d4b622a45d517bce07ad8c3f866e089bda05f4b0bbd875R194-R199
    // This otherwise causes options to retain `tabindex=0` incorrectly when the popup is closed
    // when tabbing outside.
    if (!nextOpen && activeIndex !== null) {
      const activeOption = listRef.current[activeIndex];
      // Wait for Floating UI's focus effect to have fired
      queueMicrotask(() => {
        activeOption?.setAttribute('tabindex', '-1');
      });
    }
  });
  const handleUnmount = (0, _useEventCallback.useEventCallback)(() => {
    setMounted(false);
    setActiveIndex(null);
    onOpenChangeComplete?.(false);
  });
  (0, _useOpenChangeComplete.useOpenChangeComplete)({
    enabled: !params.actionsRef,
    open,
    ref: popupRef,
    onComplete() {
      if (!open) {
        handleUnmount();
      }
    }
  });
  React.useImperativeHandle(params.actionsRef, () => ({
    unmount: handleUnmount
  }), [handleUnmount]);
  const setValue = (0, _useEventCallback.useEventCallback)((nextValue, event) => {
    params.onValueChange?.(nextValue, event);
    setValueUnwrapped(nextValue);
    if (!isValueControlled) {
      updateValue(nextValue);
    }
  });
  const hasRegisteredRef = React.useRef(false);
  const registerSelectedItem = (0, _useEventCallback.useEventCallback)(suppliedIndex => {
    if (suppliedIndex !== undefined) {
      hasRegisteredRef.current = true;
    }
    const index = suppliedIndex ?? valuesRef.current.indexOf(value);
    const hasIndex = index !== -1;
    if (hasIndex || value === null) {
      setSelectedIndex(hasIndex ? index : null);
      setLabel(hasIndex ? labelsRef.current[index] ?? '' : '');
      return;
    }
    if (process.env.NODE_ENV !== 'production') {
      if (value) {
        const stringValue = typeof value === 'string' || value === null ? value : JSON.stringify(value);
        (0, _warn.warn)(`The value \`${stringValue}\` is not present in the select items.`);
      }
    }
  });
  (0, _useModernLayoutEffect.useModernLayoutEffect)(() => {
    if (!hasRegisteredRef.current) {
      return;
    }
    registerSelectedItem(undefined);
  }, [value, registerSelectedItem]);
  const floatingRootContext = (0, _react2.useFloatingRootContext)({
    open,
    onOpenChange(nextOpen, event, reason) {
      setOpen(nextOpen, event, (0, _translateOpenChangeReason.translateOpenChangeReason)(reason));
    },
    elements: {
      reference: triggerElement,
      floating: positionerElement
    }
  });
  const click = (0, _useClick.useClick)(floatingRootContext, {
    enabled: !readOnly && !disabled,
    event: 'mousedown'
  });
  const dismiss = (0, _react2.useDismiss)(floatingRootContext, {
    bubbles: false,
    outsidePressEvent: 'mousedown'
  });
  const role = (0, _react2.useRole)(floatingRootContext, {
    role: 'select'
  });
  const listNavigation = (0, _react2.useListNavigation)(floatingRootContext, {
    enabled: !readOnly && !disabled,
    listRef,
    activeIndex,
    selectedIndex,
    disabledIndices: EMPTY_ARRAY,
    onNavigate(nextActiveIndex) {
      // Retain the highlight while transitioning out.
      if (nextActiveIndex === null && !open) {
        return;
      }
      setActiveIndex(nextActiveIndex);
    },
    // Implement our own listeners since `onPointerLeave` on each option fires while scrolling with
    // the `alignItemWithTrigger=true`, causing a performance issue on Chrome.
    focusItemOnHover: false
  });
  const typeahead = (0, _react2.useTypeahead)(floatingRootContext, {
    enabled: !readOnly && !disabled,
    listRef: labelsRef,
    activeIndex,
    selectedIndex,
    onMatch(index) {
      if (open) {
        setActiveIndex(index);
      } else {
        setValue(valuesRef.current[index]);
      }
    },
    onTypingChange(typing) {
      // FIXME: Floating UI doesn't support allowing space to select an item while the popup is
      // closed and the trigger isn't a native <button>.
      typingRef.current = typing;
    }
  });
  const {
    getReferenceProps,
    getFloatingProps,
    getItemProps
  } = (0, _react2.useInteractions)([click, dismiss, role, listNavigation, typeahead]);
  const rootContext = React.useMemo(() => ({
    id,
    name,
    required,
    disabled,
    readOnly,
    triggerElement,
    setTriggerElement,
    positionerElement,
    setPositionerElement,
    typeaheadReady,
    setTypeaheadReady,
    value,
    setValue,
    open,
    setOpen,
    mounted,
    setMounted,
    label,
    setLabel,
    valueRef,
    valuesRef,
    labelsRef,
    typingRef,
    selectionRef,
    triggerProps: getReferenceProps(),
    popupProps: getFloatingProps(),
    getItemProps,
    listRef,
    popupRef,
    selectedItemTextRef,
    floatingRootContext,
    touchModality,
    setTouchModality,
    transitionStatus,
    fieldControlValidation,
    modal,
    registerSelectedItem,
    onOpenChangeComplete,
    keyboardActiveRef,
    alignItemWithTriggerActiveRef
  }), [id, name, required, disabled, readOnly, triggerElement, positionerElement, typeaheadReady, value, setValue, open, setOpen, mounted, setMounted, label, getReferenceProps, getFloatingProps, getItemProps, floatingRootContext, touchModality, transitionStatus, fieldControlValidation, modal, registerSelectedItem, onOpenChangeComplete]);
  const indexContext = React.useMemo(() => ({
    activeIndex,
    setActiveIndex,
    selectedIndex,
    setSelectedIndex
  }), [activeIndex, selectedIndex, setActiveIndex]);
  return React.useMemo(() => ({
    rootContext,
    indexContext
  }), [rootContext, indexContext]);
}