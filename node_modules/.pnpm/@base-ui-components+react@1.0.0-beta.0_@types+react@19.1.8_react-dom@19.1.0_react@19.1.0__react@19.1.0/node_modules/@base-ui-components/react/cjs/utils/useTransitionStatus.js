"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTransitionStatus = useTransitionStatus;
var React = _interopRequireWildcard(require("react"));
var _useModernLayoutEffect = require("./useModernLayoutEffect");
var _useAnimationFrame = require("./useAnimationFrame");
/**
 * Provides a status string for CSS animations.
 * @param open - a boolean that determines if the element is open.
 * @param enableIdleState - a boolean that enables the `'idle'` state between `'starting'` and `'ending'`
 */
function useTransitionStatus(open, enableIdleState = false) {
  const [transitionStatus, setTransitionStatus] = React.useState(open && enableIdleState ? 'idle' : undefined);
  const [mounted, setMounted] = React.useState(open);
  if (open && !mounted) {
    setMounted(true);
    setTransitionStatus('starting');
  }
  if (!open && mounted && transitionStatus !== 'ending') {
    setTransitionStatus('ending');
  }
  if (!open && !mounted && transitionStatus === 'ending') {
    setTransitionStatus(undefined);
  }
  (0, _useModernLayoutEffect.useModernLayoutEffect)(() => {
    if (!open || enableIdleState) {
      return undefined;
    }
    const frame = _useAnimationFrame.AnimationFrame.request(() => {
      setTransitionStatus(undefined);
    });
    return () => {
      _useAnimationFrame.AnimationFrame.cancel(frame);
    };
  }, [enableIdleState, open]);
  (0, _useModernLayoutEffect.useModernLayoutEffect)(() => {
    if (!open || !enableIdleState) {
      return undefined;
    }
    if (open && mounted && transitionStatus !== 'idle') {
      setTransitionStatus('starting');
    }
    const frame = _useAnimationFrame.AnimationFrame.request(() => {
      setTransitionStatus('idle');
    });
    return () => {
      _useAnimationFrame.AnimationFrame.cancel(frame);
    };
  }, [enableIdleState, open, mounted, setTransitionStatus, transitionStatus]);
  return React.useMemo(() => ({
    mounted,
    setMounted,
    transitionStatus
  }), [mounted, transitionStatus]);
}