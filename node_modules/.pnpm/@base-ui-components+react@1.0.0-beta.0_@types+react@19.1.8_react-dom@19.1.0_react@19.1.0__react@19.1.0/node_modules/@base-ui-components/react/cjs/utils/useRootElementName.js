"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRootElementName = useRootElementName;
var React = _interopRequireWildcard(require("react"));
var _useModernLayoutEffect = require("./useModernLayoutEffect");
var _warn = require("./warn");
/**
 * Use this function determine the host element correctly on the server (in a SSR context, for example Next.js)
 */
function useRootElementName(parameters) {
  const {
    rootElementName: rootElementNameProp = ''
  } = parameters;
  const [rootElementName, setRootElementName] = React.useState(rootElementNameProp.toUpperCase());
  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    (0, _useModernLayoutEffect.useModernLayoutEffect)(() => {
      if (rootElementNameProp && rootElementName !== rootElementNameProp.toUpperCase()) {
        (0, _warn.warn)(`useRootElementName expected the '${rootElementNameProp}' element, but a '${rootElementName.toLowerCase()}' was rendered instead`, 'This may cause hydration issues in an SSR context, for example in a Next.js app');
      }
    }, [rootElementNameProp, rootElementName]);
  }
  const updateRootElementName = React.useCallback(element => {
    setRootElementName(element?.tagName ?? '');
  }, []);
  return {
    rootElementName,
    updateRootElementName
  };
}