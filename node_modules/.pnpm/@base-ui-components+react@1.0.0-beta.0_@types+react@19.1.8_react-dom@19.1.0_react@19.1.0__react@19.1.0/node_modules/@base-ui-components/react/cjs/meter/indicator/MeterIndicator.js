"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MeterIndicator = void 0;
var React = _interopRequireWildcard(require("react"));
var _mergeProps = require("../../merge-props");
var _useComponentRenderer = require("../../utils/useComponentRenderer");
var _MeterRootContext = require("../root/MeterRootContext");
const EMPTY = {};
/**
 * Visualizes the position of the value along the range.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Meter](https://base-ui.com/react/components/meter)
 */
const MeterIndicator = exports.MeterIndicator = /*#__PURE__*/React.forwardRef(function MeterIndicator(props, forwardedRef) {
  const {
    render,
    className,
    ...otherProps
  } = props;
  const {
    percentageValue
  } = (0, _MeterRootContext.useMeterRootContext)();
  const getStyles = React.useCallback(() => {
    return {
      insetInlineStart: 0,
      height: 'inherit',
      width: `${percentageValue}%`
    };
  }, [percentageValue]);
  const propGetter = React.useCallback((externalProps = {}) => (0, _mergeProps.mergeProps)({
    style: getStyles()
  }, externalProps), [getStyles]);
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    propGetter,
    render: render ?? 'div',
    state: EMPTY,
    className,
    ref: forwardedRef,
    extraProps: otherProps
  });
  return renderElement();
});
if (process.env.NODE_ENV !== "production") MeterIndicator.displayName = "MeterIndicator";