"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCheckboxGroup = useCheckboxGroup;
var React = _interopRequireWildcard(require("react"));
var _mergeProps = require("../merge-props");
var _useControlled = require("../utils/useControlled");
var _useEventCallback = require("../utils/useEventCallback");
var _useCheckboxGroupParent = require("./useCheckboxGroupParent");
var _FieldRootContext = require("../field/root/FieldRootContext");
function useCheckboxGroup(params) {
  const {
    allValues,
    value: externalValue,
    defaultValue,
    onValueChange
  } = params;
  const {
    labelId
  } = (0, _FieldRootContext.useFieldRootContext)();
  const [value, setValueUnwrapped] = (0, _useControlled.useControlled)({
    controlled: externalValue,
    default: defaultValue,
    name: 'CheckboxGroup',
    state: 'value'
  });
  const setValue = (0, _useEventCallback.useEventCallback)((v, event) => {
    setValueUnwrapped(v);
    onValueChange?.(v, event);
  });
  const parent = (0, _useCheckboxGroupParent.useCheckboxGroupParent)({
    allValues,
    value: externalValue,
    onValueChange
  });
  const getRootProps = React.useCallback((externalProps = {}) => (0, _mergeProps.mergeProps)({
    role: 'group',
    'aria-labelledby': labelId
  }, externalProps), [labelId]);
  return React.useMemo(() => ({
    getRootProps,
    value,
    setValue,
    parent
  }), [getRootProps, value, setValue, parent]);
}