"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CheckboxGroup = void 0;
var React = _interopRequireWildcard(require("react"));
var _useBaseUiId = require("../utils/useBaseUiId");
var _useComponentRenderer = require("../utils/useComponentRenderer");
var _useEventCallback = require("../utils/useEventCallback");
var _useCheckboxGroup = require("./useCheckboxGroup");
var _CheckboxGroupContext = require("./CheckboxGroupContext");
var _FieldRootContext = require("../field/root/FieldRootContext");
var _constants = require("../field/utils/constants");
var _useField = require("../field/useField");
var _useFieldControlValidation = require("../field/control/useFieldControlValidation");
var _useCheckboxRoot = require("../checkbox/root/useCheckboxRoot");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * Provides a shared state to a series of checkboxes.
 *
 * Documentation: [Base UI Checkbox Group](https://base-ui.com/react/components/checkbox-group)
 */
const CheckboxGroup = exports.CheckboxGroup = /*#__PURE__*/React.forwardRef(function CheckboxGroup(props, forwardedRef) {
  const {
    render,
    className,
    value: externalValue,
    defaultValue,
    onValueChange,
    allValues,
    disabled: disabledProp = false,
    id: idProp,
    ...otherProps
  } = props;
  const {
    disabled: fieldDisabled,
    state: fieldState,
    name: fieldName
  } = (0, _FieldRootContext.useFieldRootContext)();
  const disabled = fieldDisabled || disabledProp;
  const fieldControlValidation = (0, _useFieldControlValidation.useFieldControlValidation)();
  const {
    getRootProps,
    value,
    setValue,
    parent
  } = (0, _useCheckboxGroup.useCheckboxGroup)({
    value: externalValue,
    allValues,
    defaultValue,
    onValueChange
  });
  const id = (0, _useBaseUiId.useBaseUiId)(idProp);
  const controlRef = React.useRef(null);
  const registerControlRef = (0, _useEventCallback.useEventCallback)(element => {
    if (controlRef.current == null && element != null && !element.hasAttribute(_useCheckboxRoot.PARENT_CHECKBOX)) {
      controlRef.current = element;
    }
  });
  (0, _useField.useField)({
    enabled: !!fieldName,
    id,
    commitValidation: fieldControlValidation.commitValidation,
    value,
    controlRef
  });
  const state = React.useMemo(() => ({
    ...fieldState,
    disabled
  }), [fieldState, disabled]);
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    propGetter: getRootProps,
    render: render ?? 'div',
    className,
    state,
    ref: forwardedRef,
    extraProps: otherProps,
    customStyleHookMapping: _constants.fieldValidityMapping
  });
  const contextValue = React.useMemo(() => ({
    allValues,
    value,
    defaultValue,
    setValue,
    parent,
    disabled,
    fieldControlValidation,
    registerControlRef
  }), [allValues, value, defaultValue, setValue, parent, disabled, fieldControlValidation, registerControlRef]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_CheckboxGroupContext.CheckboxGroupContext.Provider, {
    value: contextValue,
    children: renderElement()
  });
});
if (process.env.NODE_ENV !== "production") CheckboxGroup.displayName = "CheckboxGroup";