"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RadioGroup = void 0;
var React = _interopRequireWildcard(require("react"));
var _composite = require("../composite/composite");
var _CompositeRoot = require("../composite/root/CompositeRoot");
var _useComponentRenderer = require("../utils/useComponentRenderer");
var _useEventCallback = require("../utils/useEventCallback");
var _DirectionContext = require("../direction-provider/DirectionContext");
var _useRadioGroup = require("./useRadioGroup");
var _RadioGroupContext = require("./RadioGroupContext");
var _FieldRootContext = require("../field/root/FieldRootContext");
var _constants = require("../field/utils/constants");
var _jsxRuntime = require("react/jsx-runtime");
const MODIFIER_KEYS = [_composite.SHIFT];

/**
 * Provides a shared state to a series of radio buttons.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Radio Group](https://base-ui.com/react/components/radio)
 */
const RadioGroup = exports.RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, forwardedRef) {
  const {
    render,
    className,
    disabled: disabledProp,
    readOnly,
    required,
    onValueChange: onValueChangeProp,
    value,
    defaultValue,
    name: nameProp,
    inputRef,
    ...otherProps
  } = props;
  const direction = (0, _DirectionContext.useDirection)();
  const radioGroup = (0, _useRadioGroup.useRadioGroup)(props);
  const {
    state: fieldState,
    disabled: fieldDisabled,
    name: fieldName
  } = (0, _FieldRootContext.useFieldRootContext)();
  const disabled = fieldDisabled || disabledProp;
  const name = fieldName ?? nameProp;
  const onValueChange = (0, _useEventCallback.useEventCallback)(onValueChangeProp);
  const state = React.useMemo(() => ({
    ...fieldState,
    disabled: disabled ?? false,
    required: required ?? false,
    readOnly: readOnly ?? false
  }), [fieldState, disabled, readOnly, required]);
  const contextValue = React.useMemo(() => ({
    ...fieldState,
    ...radioGroup,
    onValueChange,
    disabled,
    readOnly,
    required,
    name
  }), [fieldState, disabled, onValueChange, radioGroup, readOnly, required, name]);
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    propGetter: radioGroup.getRootProps,
    render: render ?? 'div',
    ref: forwardedRef,
    className,
    state,
    extraProps: otherProps,
    customStyleHookMapping: _constants.fieldValidityMapping
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_RadioGroupContext.RadioGroupContext.Provider, {
    value: contextValue,
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_CompositeRoot.CompositeRoot, {
      direction: direction,
      enableHomeAndEndKeys: false,
      modifierKeys: MODIFIER_KEYS,
      render: renderElement(),
      stopEventPropagation: true
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
      ...radioGroup.getInputProps()
    })]
  });
});
if (process.env.NODE_ENV !== "production") RadioGroup.displayName = "RadioGroup";