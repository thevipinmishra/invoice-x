"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRadioGroup = useRadioGroup;
var React = _interopRequireWildcard(require("react"));
var _utils = require("@floating-ui/react/utils");
var _mergeProps = require("../merge-props");
var _useControlled = require("../utils/useControlled");
var _FieldRootContext = require("../field/root/FieldRootContext");
var _useBaseUiId = require("../utils/useBaseUiId");
var _useFieldControlValidation = require("../field/control/useFieldControlValidation");
var _useField = require("../field/useField");
var _visuallyHidden = require("../utils/visuallyHidden");
var _FormContext = require("../form/FormContext");
var _useForkRef = require("../utils/useForkRef");
function useRadioGroup(params) {
  const {
    disabled: disabledProp = false,
    required,
    name: nameProp,
    defaultValue,
    readOnly,
    value: externalValue,
    inputRef: inputRefProp
  } = params;
  const {
    labelId,
    setTouched: setFieldTouched,
    setFocused,
    validationMode,
    name: fieldName,
    disabled: fieldDisabled
  } = (0, _FieldRootContext.useFieldRootContext)();
  const {
    clearErrors
  } = (0, _FormContext.useFormContext)();
  const disabled = fieldDisabled || disabledProp;
  const name = fieldName ?? nameProp;
  const fieldControlValidation = (0, _useFieldControlValidation.useFieldControlValidation)();
  const id = (0, _useBaseUiId.useBaseUiId)();
  const ref = (0, _useForkRef.useForkRef)(fieldControlValidation.inputRef, inputRefProp);
  const [checkedValue, setCheckedValue] = (0, _useControlled.useControlled)({
    controlled: externalValue,
    default: defaultValue,
    name: 'RadioGroup',
    state: 'value'
  });
  (0, _useField.useField)({
    id,
    commitValidation: fieldControlValidation.commitValidation,
    value: checkedValue,
    controlRef: fieldControlValidation.inputRef
  });
  const prevValueRef = React.useRef(checkedValue);
  (0, _utils.useModernLayoutEffect)(() => {
    if (prevValueRef.current === checkedValue) {
      return;
    }
    clearErrors(name);
    if (validationMode === 'onChange') {
      fieldControlValidation.commitValidation(checkedValue);
    } else {
      fieldControlValidation.commitValidation(checkedValue, true);
    }
  }, [name, clearErrors, validationMode, checkedValue, fieldControlValidation]);
  (0, _utils.useModernLayoutEffect)(() => {
    prevValueRef.current = checkedValue;
  }, [checkedValue]);
  const [touched, setTouched] = React.useState(false);
  const getRootProps = React.useCallback((externalProps = {}) => (0, _mergeProps.mergeProps)({
    role: 'radiogroup',
    'aria-disabled': disabled || undefined,
    'aria-readonly': readOnly || undefined,
    'aria-labelledby': labelId,
    onFocus() {
      setFocused(true);
    },
    onBlur(event) {
      if (!(0, _utils.contains)(event.currentTarget, event.relatedTarget)) {
        setFieldTouched(true);
        setFocused(false);
        if (validationMode === 'onBlur') {
          fieldControlValidation.commitValidation(checkedValue);
        }
      }
    },
    onKeyDownCapture(event) {
      if (event.key.startsWith('Arrow')) {
        setFieldTouched(true);
        setTouched(true);
        setFocused(true);
      }
    }
  }, fieldControlValidation.getValidationProps(externalProps)), [fieldControlValidation, disabled, readOnly, labelId, setFocused, setFieldTouched, validationMode, checkedValue]);
  const serializedCheckedValue = React.useMemo(() => {
    if (checkedValue == null) {
      return ''; // avoid uncontrolled -> controlled error
    }
    if (typeof checkedValue === 'string') {
      return checkedValue;
    }
    return JSON.stringify(checkedValue);
  }, [checkedValue]);
  const getInputProps = React.useCallback((externalProps = {}) => (0, _mergeProps.mergeProps)({
    value: serializedCheckedValue,
    ref,
    id,
    name,
    disabled,
    readOnly,
    required,
    'aria-hidden': true,
    tabIndex: -1,
    style: _visuallyHidden.visuallyHidden
  }, fieldControlValidation.getInputValidationProps(externalProps)), [serializedCheckedValue, ref, id, name, disabled, readOnly, required, fieldControlValidation]);
  return React.useMemo(() => ({
    getRootProps,
    getInputProps,
    checkedValue,
    setCheckedValue,
    touched,
    setTouched,
    fieldControlValidation,
    name
  }), [getRootProps, getInputProps, checkedValue, setCheckedValue, touched, fieldControlValidation, name]);
}