"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Menubar = void 0;
var React = _interopRequireWildcard(require("react"));
var _react2 = require("@floating-ui/react");
var _MenubarContext = require("./MenubarContext");
var _utils = require("../utils");
var _CompositeRoot = require("../composite/root/CompositeRoot");
var _useRenderElement = require("../utils/useRenderElement");
var _useAnimationFrame = require("../utils/useAnimationFrame");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * The container for menus.
 *
 * Documentation: [Base UI Menubar](https://base-ui.com/react/components/menubar)
 */
const Menubar = exports.Menubar = /*#__PURE__*/React.forwardRef(function Menubar(props, forwardedRef) {
  const {
    orientation = 'horizontal',
    loop = true,
    render,
    className,
    modal = true,
    ...otherProps
  } = props;
  const [contentElement, setContentElement] = React.useState(null);
  const [hasSubmenuOpen, setHasSubmenuOpen] = React.useState(false);
  (0, _utils.useScrollLock)({
    enabled: modal && hasSubmenuOpen,
    open: hasSubmenuOpen,
    mounted: hasSubmenuOpen,
    referenceElement: contentElement
  });
  const state = React.useMemo(() => ({
    orientation,
    modal
  }), [orientation, modal]);
  const contentRef = React.useRef(null);
  const allowMouseUpTriggerRef = React.useRef(false);
  const element = (0, _useRenderElement.useRenderElement)('div', props, {
    state,
    props: [{
      role: 'menubar'
    }, otherProps],
    ref: [forwardedRef, setContentElement, contentRef]
  });
  const context = React.useMemo(() => ({
    contentElement,
    setContentElement,
    setHasSubmenuOpen,
    hasSubmenuOpen,
    modal,
    orientation,
    allowMouseUpTriggerRef
  }), [contentElement, hasSubmenuOpen, modal, orientation]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_MenubarContext.MenubarContext.Provider, {
    value: context,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_react2.FloatingTree, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(MenubarContent, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CompositeRoot.CompositeRoot, {
          render: element,
          orientation: orientation,
          loop: loop,
          highlightItemOnHover: hasSubmenuOpen
        })
      })
    })
  });
});
if (process.env.NODE_ENV !== "production") Menubar.displayName = "Menubar";
function MenubarContent(props) {
  const nodeId = (0, _react2.useFloatingNodeId)();
  const {
    events: menuEvents
  } = (0, _react2.useFloatingTree)();
  const openSubmenusRef = React.useRef(new Set());
  const rootContext = (0, _MenubarContext.useMenubarContext)();
  React.useEffect(() => {
    function onSubmenuOpenChange(event) {
      if (event.parentNodeId !== nodeId) {
        return;
      }
      if (event.open) {
        openSubmenusRef.current.add(event.nodeId);
      } else {
        openSubmenusRef.current.delete(event.nodeId);
      }
      const isAnyOpen = openSubmenusRef.current.size > 0;
      if (isAnyOpen) {
        rootContext.setHasSubmenuOpen(true);
      } else if (rootContext.hasSubmenuOpen) {
        // wait for the next frame to set the state to make sure another menu doesn't open
        // immediately after the previous one is closed
        _useAnimationFrame.AnimationFrame.request(() => {
          if (openSubmenusRef.current.size === 0) {
            rootContext.setHasSubmenuOpen(false);
          }
        });
      }
    }
    menuEvents.on('openchange', onSubmenuOpenChange);
    return () => {
      menuEvents.off('openchange', onSubmenuOpenChange);
    };
  }, [menuEvents, nodeId, rootContext]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_react2.FloatingNode, {
    id: nodeId,
    children: props.children
  });
}