"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PreviewCardPositioner = void 0;
var React = _interopRequireWildcard(require("react"));
var _useComponentRenderer = require("../../utils/useComponentRenderer");
var _PreviewCardContext = require("../root/PreviewCardContext");
var _usePreviewCardPositioner = require("./usePreviewCardPositioner");
var _PreviewCardPositionerContext = require("./PreviewCardPositionerContext");
var _useForkRef = require("../../utils/useForkRef");
var _popupStateMapping = require("../../utils/popupStateMapping");
var _PreviewCardPortalContext = require("../portal/PreviewCardPortalContext");
var _constants = require("../../utils/constants");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * Positions the popup against the trigger.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Preview Card](https://base-ui.com/react/components/preview-card)
 */
const PreviewCardPositioner = exports.PreviewCardPositioner = /*#__PURE__*/React.forwardRef(function PreviewCardPositioner(props, forwardedRef) {
  const {
    render,
    className,
    anchor,
    positionMethod = 'absolute',
    side = 'bottom',
    align = 'center',
    sideOffset = 0,
    alignOffset = 0,
    collisionBoundary = 'clipping-ancestors',
    collisionPadding = 5,
    arrowPadding = 5,
    sticky = false,
    trackAnchor = true,
    collisionAvoidance = _constants.POPUP_COLLISION_AVOIDANCE,
    ...otherProps
  } = props;
  const {
    open,
    mounted,
    floatingRootContext,
    setPositionerElement
  } = (0, _PreviewCardContext.usePreviewCardRootContext)();
  const keepMounted = (0, _PreviewCardPortalContext.usePreviewCardPortalContext)();
  const positioner = (0, _usePreviewCardPositioner.usePreviewCardPositioner)({
    anchor,
    floatingRootContext,
    positionMethod,
    mounted,
    side,
    sideOffset,
    align,
    alignOffset,
    arrowPadding,
    collisionBoundary,
    collisionPadding,
    sticky,
    trackAnchor,
    keepMounted,
    collisionAvoidance
  });
  const state = React.useMemo(() => ({
    open,
    side: positioner.side,
    align: positioner.align,
    anchorHidden: positioner.anchorHidden
  }), [open, positioner.side, positioner.align, positioner.anchorHidden]);
  const contextValue = React.useMemo(() => ({
    side: positioner.side,
    align: positioner.align,
    arrowRef: positioner.arrowRef,
    arrowUncentered: positioner.arrowUncentered,
    arrowStyles: positioner.arrowStyles
  }), [positioner.side, positioner.align, positioner.arrowRef, positioner.arrowUncentered, positioner.arrowStyles]);
  const mergedRef = (0, _useForkRef.useForkRef)(setPositionerElement, forwardedRef);
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    propGetter: positioner.getPositionerProps,
    render: render ?? 'div',
    className,
    state,
    ref: mergedRef,
    extraProps: otherProps,
    customStyleHookMapping: _popupStateMapping.popupStateMapping
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_PreviewCardPositionerContext.PreviewCardPositionerContext.Provider, {
    value: contextValue,
    children: renderElement()
  });
});
if (process.env.NODE_ENV !== "production") PreviewCardPositioner.displayName = "PreviewCardPositioner";