"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PreviewCardPopup = void 0;
var React = _interopRequireWildcard(require("react"));
var _useComponentRenderer = require("../../utils/useComponentRenderer");
var _PreviewCardContext = require("../root/PreviewCardContext");
var _PreviewCardPositionerContext = require("../positioner/PreviewCardPositionerContext");
var _usePreviewCardPopup = require("./usePreviewCardPopup");
var _useForkRef = require("../../utils/useForkRef");
var _popupStateMapping = require("../../utils/popupStateMapping");
var _mergeProps = require("../../merge-props");
var _styleHookMapping = require("../../utils/styleHookMapping");
var _useOpenChangeComplete = require("../../utils/useOpenChangeComplete");
const customStyleHookMapping = {
  ..._popupStateMapping.popupStateMapping,
  ..._styleHookMapping.transitionStatusMapping
};

/**
 * A container for the preview card contents.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Preview Card](https://base-ui.com/react/components/preview-card)
 */
const PreviewCardPopup = exports.PreviewCardPopup = /*#__PURE__*/React.forwardRef(function PreviewCardPopup(props, forwardedRef) {
  const {
    className,
    render,
    ...otherProps
  } = props;
  const {
    open,
    transitionStatus,
    getRootPopupProps,
    popupRef,
    onOpenChangeComplete
  } = (0, _PreviewCardContext.usePreviewCardRootContext)();
  const {
    side,
    align
  } = (0, _PreviewCardPositionerContext.usePreviewCardPositionerContext)();
  (0, _useOpenChangeComplete.useOpenChangeComplete)({
    open,
    ref: popupRef,
    onComplete() {
      if (open) {
        onOpenChangeComplete?.(true);
      }
    }
  });
  const {
    getPopupProps
  } = (0, _usePreviewCardPopup.usePreviewCardPopup)({
    getProps: getRootPopupProps
  });
  const state = React.useMemo(() => ({
    open,
    side,
    align,
    transitionStatus
  }), [open, side, align, transitionStatus]);
  const mergedRef = (0, _useForkRef.useForkRef)(popupRef, forwardedRef);
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    propGetter: getPopupProps,
    ref: mergedRef,
    render: render ?? 'div',
    className,
    state,
    extraProps: transitionStatus === 'starting' ? (0, _mergeProps.mergeProps)({
      style: {
        transition: 'none'
      }
    }, otherProps) : otherProps,
    customStyleHookMapping
  });
  return renderElement();
});
if (process.env.NODE_ENV !== "production") PreviewCardPopup.displayName = "PreviewCardPopup";