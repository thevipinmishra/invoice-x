"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useToolbarInput = useToolbarInput;
var React = _interopRequireWildcard(require("react"));
var _mergeProps = require("../../merge-props");
var _useButton = require("../../use-button");
var _composite = require("../../composite/composite");
function useToolbarInput(parameters) {
  const {
    disabled,
    focusableWhenDisabled,
    ref: externalRef
  } = parameters;
  const {
    getButtonProps
  } = (0, _useButton.useButton)({
    buttonRef: externalRef,
    disabled,
    focusableWhenDisabled,
    type: 'text',
    elementName: 'input'
  });
  const getInputProps = React.useCallback((externalProps = {}) => (0, _mergeProps.mergeProps)({
    onClick(event) {
      if (disabled) {
        event.preventDefault();
      }
    },
    onKeyDown(event) {
      if (event.key !== _composite.ARROW_LEFT && event.key !== _composite.ARROW_RIGHT && disabled) {
        (0, _composite.stopEvent)(event);
      }
    },
    onPointerDown(event) {
      if (disabled) {
        event.preventDefault();
      }
    }
  }, externalProps, getButtonProps), [disabled, getButtonProps]);
  return React.useMemo(() => ({
    getInputProps
  }), [getInputProps]);
}