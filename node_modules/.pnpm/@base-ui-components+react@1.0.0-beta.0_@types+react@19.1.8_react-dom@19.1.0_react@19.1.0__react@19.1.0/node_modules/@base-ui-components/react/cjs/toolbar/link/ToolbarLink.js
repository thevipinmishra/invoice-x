"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToolbarLink = void 0;
var React = _interopRequireWildcard(require("react"));
var _useComponentRenderer = require("../../utils/useComponentRenderer");
var _useButton = require("../../use-button");
var _CompositeItem = require("../../composite/item/CompositeItem");
var _ToolbarRootContext = require("../root/ToolbarRootContext");
var _jsxRuntime = require("react/jsx-runtime");
const TOOLBAR_LINK_METADATA = {
  focusableWhenDisabled: true
};
/**
 * A link component.
 * Renders an `<a>` element.
 *
 * Documentation: [Base UI Toolbar](https://base-ui.com/react/components/toolbar)
 */
const ToolbarLink = exports.ToolbarLink = /*#__PURE__*/React.forwardRef(function ToolbarLink(props, forwardedRef) {
  const {
    className,
    render,
    ...otherProps
  } = props;
  const {
    orientation
  } = (0, _ToolbarRootContext.useToolbarRootContext)();
  const {
    getButtonProps
  } = (0, _useButton.useButton)({
    buttonRef: forwardedRef,
    elementName: 'a'
  });
  const state = React.useMemo(() => ({
    orientation
  }), [orientation]);
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    propGetter: getButtonProps,
    render: render ?? 'a',
    state,
    className,
    extraProps: otherProps
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_CompositeItem.CompositeItem, {
    metadata: TOOLBAR_LINK_METADATA,
    render: renderElement()
  });
});
if (process.env.NODE_ENV !== "production") ToolbarLink.displayName = "ToolbarLink";