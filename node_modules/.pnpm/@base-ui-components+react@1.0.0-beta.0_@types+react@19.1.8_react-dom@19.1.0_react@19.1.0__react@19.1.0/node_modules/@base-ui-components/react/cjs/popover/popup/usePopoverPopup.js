"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePopoverPopup = usePopoverPopup;
var React = _interopRequireWildcard(require("react"));
var _PopoverRootContext = require("../root/PopoverRootContext");
function usePopoverPopup(params) {
  const {
    titleId,
    descriptionId,
    initialFocus
  } = params;
  const {
    popupRef,
    openMethod
  } = (0, _PopoverRootContext.usePopoverRootContext)();
  const props = React.useMemo(() => ({
    'aria-labelledby': titleId,
    'aria-describedby': descriptionId
  }), [titleId, descriptionId]);

  // Default initial focus logic:
  // If opened by touch, focus the popup element to prevent the virtual keyboard from opening
  // (this is required for Android specifically as iOS handles this automatically).
  const defaultInitialFocus = React.useCallback(interactionType => {
    if (interactionType === 'touch') {
      return popupRef;
    }
    return 0;
  }, [popupRef]);
  const resolvedInitialFocus = React.useMemo(() => {
    if (initialFocus == null) {
      return defaultInitialFocus(openMethod ?? '');
    }
    if (typeof initialFocus === 'function') {
      return initialFocus(openMethod ?? '');
    }
    return initialFocus;
  }, [defaultInitialFocus, initialFocus, openMethod]);
  return React.useMemo(() => ({
    props,
    resolvedInitialFocus
  }), [props, resolvedInitialFocus]);
}