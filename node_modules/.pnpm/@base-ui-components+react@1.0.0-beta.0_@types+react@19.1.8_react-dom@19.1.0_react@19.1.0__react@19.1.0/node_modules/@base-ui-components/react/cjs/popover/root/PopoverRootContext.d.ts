import * as React from 'react';
import type { FloatingRootContext } from '@floating-ui/react';
import type { TransitionStatus } from "../../utils/useTransitionStatus.js";
import type { HTMLProps } from "../../utils/types.js";
import type { InteractionType } from "../../utils/useEnhancedClickHandler.js";
import type { BaseOpenChangeReason } from "../../utils/translateOpenChangeReason.js";
export type PopoverOpenChangeReason = BaseOpenChangeReason | 'close-press';
export interface PopoverRootContext {
  open: boolean;
  openOnHover: boolean;
  setOpen: (open: boolean, event: Event | undefined, reason: PopoverOpenChangeReason | undefined) => void;
  setTriggerElement: (el: Element | null) => void;
  positionerElement: HTMLElement | null;
  setPositionerElement: (el: HTMLElement | null) => void;
  popupRef: React.RefObject<HTMLElement | null>;
  delay: number;
  closeDelay: number;
  instantType: 'dismiss' | 'click' | undefined;
  mounted: boolean;
  setMounted: React.Dispatch<React.SetStateAction<boolean>>;
  transitionStatus: TransitionStatus;
  titleId: string | undefined;
  setTitleId: React.Dispatch<React.SetStateAction<string | undefined>>;
  descriptionId: string | undefined;
  setDescriptionId: React.Dispatch<React.SetStateAction<string | undefined>>;
  floatingRootContext: FloatingRootContext;
  triggerProps: HTMLProps;
  popupProps: HTMLProps;
  openMethod: InteractionType | null;
  openReason: PopoverOpenChangeReason | null;
  onOpenChangeComplete: ((open: boolean) => void) | undefined;
  modal: boolean | 'trap-focus';
}
export declare const PopoverRootContext: React.Context<PopoverRootContext | undefined>;
export declare function usePopoverRootContext(optional?: false): PopoverRootContext;
export declare function usePopoverRootContext(optional: true): PopoverRootContext | undefined;