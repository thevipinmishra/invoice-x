import * as React from 'react';
import { type FloatingRootContext } from '@floating-ui/react';
import type { TransitionStatus } from "../../utils/useTransitionStatus.js";
import type { HTMLProps } from "../../utils/types.js";
import { type BaseOpenChangeReason } from "../../utils/translateOpenChangeReason.js";
export type TooltipOpenChangeReason = BaseOpenChangeReason | 'disabled';
export declare function useTooltipRoot(params: useTooltipRoot.Parameters): useTooltipRoot.ReturnValue;
export declare namespace useTooltipRoot {
  interface Parameters {
    /**
     * Whether the tooltip is initially open.
     *
     * To render a controlled tooltip, use the `open` prop instead.
     * @default false
     */
    defaultOpen?: boolean;
    /**
     * Whether the tooltip is currently open.
     */
    open?: boolean;
    /**
     * Event handler called when the tooltip is opened or closed.
     * @type (open: boolean, event?: Event, reason?: Tooltip.Root.OpenChangeReason) => void
     */
    onOpenChange?: (open: boolean, event: Event | undefined, reason: TooltipOpenChangeReason | undefined) => void;
    /**
     * Event handler called after any animations complete when the tooltip is opened or closed.
     */
    onOpenChangeComplete?: (open: boolean) => void;
    /**
     * Whether the tooltip contents can be hovered without closing the tooltip.
     * @default true
     */
    hoverable?: boolean;
    /**
     * Determines which axis the tooltip should track the cursor on.
     * @default 'none'
     */
    trackCursorAxis?: 'none' | 'x' | 'y' | 'both';
    /**
     * How long to wait before opening the tooltip. Specified in milliseconds.
     * @default 600
     */
    delay?: number;
    /**
     * How long to wait before closing the tooltip. Specified in milliseconds.
     * @default 0
     */
    closeDelay?: number;
    /**
     * A ref to imperative actions.
     * - `unmount`: When specified, the tooltip will not be unmounted when closed.
     * Instead, the `unmount` function must be called to unmount the tooltip manually.
     * Useful when the tooltip's animation is controlled by an external library.
     */
    actionsRef?: React.RefObject<Actions>;
    /**
     * Whether the tooltip is disabled.
     * @default false
     */
    disabled?: boolean;
  }
  interface ReturnValue {
    open: boolean;
    setOpen: (open: boolean, event: Event | undefined, reason: TooltipOpenChangeReason | undefined) => void;
    mounted: boolean;
    setMounted: React.Dispatch<React.SetStateAction<boolean>>;
    triggerProps: HTMLProps;
    popupProps: HTMLProps;
    floatingRootContext: FloatingRootContext;
    instantType: 'delay' | 'dismiss' | 'focus' | undefined;
    transitionStatus: TransitionStatus;
    positionerElement: HTMLElement | null;
    setTriggerElement: React.Dispatch<React.SetStateAction<Element | null>>;
    setPositionerElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>;
    popupRef: React.RefObject<HTMLElement | null>;
    onOpenChangeComplete: ((open: boolean) => void) | undefined;
  }
  interface Actions {
    unmount: () => void;
  }
}