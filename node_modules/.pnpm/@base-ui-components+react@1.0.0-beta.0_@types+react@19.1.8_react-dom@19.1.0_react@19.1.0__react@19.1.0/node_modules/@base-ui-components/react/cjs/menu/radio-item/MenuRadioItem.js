"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuRadioItem = void 0;
var React = _interopRequireWildcard(require("react"));
var _react2 = require("@floating-ui/react");
var _MenuRootContext = require("../root/MenuRootContext");
var _useComponentRenderer = require("../../utils/useComponentRenderer");
var _useBaseUiId = require("../../utils/useBaseUiId");
var _useForkRef = require("../../utils/useForkRef");
var _MenuRadioGroupContext = require("../radio-group/MenuRadioGroupContext");
var _MenuRadioItemContext = require("./MenuRadioItemContext");
var _styleHookMapping = require("../utils/styleHookMapping");
var _useCompositeListItem = require("../../composite/list/useCompositeListItem");
var _mergeProps = require("../../merge-props");
var _useMenuItem = require("../item/useMenuItem");
var _jsxRuntime = require("react/jsx-runtime");
const InnerMenuRadioItem = /*#__PURE__*/React.memo(/*#__PURE__*/React.forwardRef(function InnerMenuRadioItem(props, forwardedRef) {
  const {
    checked,
    setChecked,
    className,
    closeOnClick,
    disabled = false,
    highlighted,
    id,
    menuEvents,
    itemProps,
    render,
    allowMouseUpTriggerRef,
    typingRef,
    ...other
  } = props;
  const {
    getItemProps: getMenuItemProps
  } = (0, _useMenuItem.useMenuItem)({
    closeOnClick,
    disabled,
    highlighted,
    id,
    menuEvents,
    ref: forwardedRef,
    allowMouseUpTriggerRef,
    typingRef
  });
  const getItemProps = React.useCallback(externalProps => {
    return (0, _mergeProps.mergeProps)({
      role: 'menuitemradio',
      'aria-checked': checked,
      onClick: event => {
        setChecked(event.nativeEvent);
      }
    }, externalProps, getMenuItemProps);
  }, [checked, getMenuItemProps, setChecked]);
  const state = {
    disabled,
    highlighted,
    checked
  };
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    render: render || 'div',
    className,
    state,
    propGetter: externalProps => (0, _mergeProps.mergeProps)(itemProps, externalProps, getItemProps),
    customStyleHookMapping: _styleHookMapping.itemMapping,
    extraProps: other
  });
  return renderElement();
}));

/**
 * A menu item that works like a radio button in a given group.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Menu](https://base-ui.com/react/components/menu)
 */
if (process.env.NODE_ENV !== "production") InnerMenuRadioItem.displayName = "InnerMenuRadioItem";
const MenuRadioItem = exports.MenuRadioItem = /*#__PURE__*/React.forwardRef(function MenuRadioItem(props, forwardedRef) {
  const {
    id: idProp,
    value,
    label,
    disabled: disabledProp = false,
    closeOnClick = false,
    ...other
  } = props;
  const itemRef = React.useRef(null);
  const listItem = (0, _useCompositeListItem.useCompositeListItem)({
    label
  });
  const mergedRef = (0, _useForkRef.useForkRef)(forwardedRef, listItem.ref, itemRef);
  const {
    itemProps,
    activeIndex,
    allowMouseUpTriggerRef,
    typingRef
  } = (0, _MenuRootContext.useMenuRootContext)();
  const id = (0, _useBaseUiId.useBaseUiId)(idProp);
  const highlighted = listItem.index === activeIndex;
  const {
    events: menuEvents
  } = (0, _react2.useFloatingTree)();
  const {
    value: selectedValue,
    setValue: setSelectedValue,
    disabled: groupDisabled
  } = (0, _MenuRadioGroupContext.useMenuRadioGroupContext)();
  const disabled = groupDisabled || disabledProp;

  // This wrapper component is used as a performance optimization.
  // MenuRadioItem reads the context and re-renders the actual MenuRadioItem
  // only when it needs to.

  const checked = selectedValue === value;
  const setChecked = React.useCallback(event => {
    setSelectedValue(value, event);
  }, [setSelectedValue, value]);
  const contextValue = React.useMemo(() => ({
    checked,
    highlighted,
    disabled
  }), [checked, highlighted, disabled]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_MenuRadioItemContext.MenuRadioItemContext.Provider, {
    value: contextValue,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(InnerMenuRadioItem, {
      ...other,
      id: id,
      ref: mergedRef,
      disabled: disabled,
      highlighted: highlighted,
      menuEvents: menuEvents,
      itemProps: itemProps,
      allowMouseUpTriggerRef: allowMouseUpTriggerRef,
      checked: selectedValue === value,
      setChecked: setChecked,
      typingRef: typingRef,
      closeOnClick: closeOnClick
    })
  });
});
if (process.env.NODE_ENV !== "production") MenuRadioItem.displayName = "MenuRadioItem";