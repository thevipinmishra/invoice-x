"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuItem = void 0;
var React = _interopRequireWildcard(require("react"));
var _react2 = require("@floating-ui/react");
var _useMenuItem = require("./useMenuItem");
var _MenuRootContext = require("../root/MenuRootContext");
var _useComponentRenderer = require("../../utils/useComponentRenderer");
var _useBaseUiId = require("../../utils/useBaseUiId");
var _useForkRef = require("../../utils/useForkRef");
var _useCompositeListItem = require("../../composite/list/useCompositeListItem");
var _mergeProps = require("../../merge-props");
var _jsxRuntime = require("react/jsx-runtime");
const InnerMenuItem = /*#__PURE__*/React.memo(/*#__PURE__*/React.forwardRef(function InnerMenuItem(props, forwardedRef) {
  const {
    className,
    closeOnClick = true,
    disabled = false,
    highlighted,
    id,
    menuEvents,
    itemProps,
    render,
    allowMouseUpTriggerRef,
    typingRef,
    ...other
  } = props;
  const {
    getItemProps
  } = (0, _useMenuItem.useMenuItem)({
    closeOnClick,
    disabled,
    highlighted,
    id,
    menuEvents,
    ref: forwardedRef,
    allowMouseUpTriggerRef,
    typingRef
  });
  const state = React.useMemo(() => ({
    disabled
  }), [disabled]);
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    render: render || 'div',
    className,
    state,
    propGetter: externalProps => (0, _mergeProps.mergeProps)(itemProps, externalProps, getItemProps),
    extraProps: other
  });
  return renderElement();
}));

/**
 * An individual interactive item in the menu.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Menu](https://base-ui.com/react/components/menu)
 */
if (process.env.NODE_ENV !== "production") InnerMenuItem.displayName = "InnerMenuItem";
const MenuItem = exports.MenuItem = /*#__PURE__*/React.forwardRef(function MenuItem(props, forwardedRef) {
  const {
    id: idProp,
    label,
    ...other
  } = props;
  const itemRef = React.useRef(null);
  const listItem = (0, _useCompositeListItem.useCompositeListItem)({
    label
  });
  const mergedRef = (0, _useForkRef.useForkRef)(forwardedRef, listItem.ref, itemRef);
  const {
    itemProps,
    activeIndex,
    allowMouseUpTriggerRef,
    typingRef
  } = (0, _MenuRootContext.useMenuRootContext)();
  const id = (0, _useBaseUiId.useBaseUiId)(idProp);
  const highlighted = listItem.index === activeIndex;
  const {
    events: menuEvents
  } = (0, _react2.useFloatingTree)();

  // This wrapper component is used as a performance optimization.
  // MenuItem reads the context and re-renders the actual MenuItem
  // only when it needs to.

  return /*#__PURE__*/(0, _jsxRuntime.jsx)(InnerMenuItem, {
    ...other,
    id: id,
    ref: mergedRef,
    highlighted: highlighted,
    menuEvents: menuEvents,
    itemProps: itemProps,
    allowMouseUpTriggerRef: allowMouseUpTriggerRef,
    typingRef: typingRef
  });
});
if (process.env.NODE_ENV !== "production") MenuItem.displayName = "MenuItem";