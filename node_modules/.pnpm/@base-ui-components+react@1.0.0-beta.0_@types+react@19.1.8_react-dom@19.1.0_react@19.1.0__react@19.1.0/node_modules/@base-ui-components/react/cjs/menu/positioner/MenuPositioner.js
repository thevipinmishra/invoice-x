"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuPositioner = void 0;
var React = _interopRequireWildcard(require("react"));
var _react2 = require("@floating-ui/react");
var _MenuPositionerContext = require("./MenuPositionerContext");
var _MenuRootContext = require("../root/MenuRootContext");
var _useAnchorPositioning = require("../../utils/useAnchorPositioning");
var _useComponentRenderer = require("../../utils/useComponentRenderer");
var _useForkRef = require("../../utils/useForkRef");
var _popupStateMapping = require("../../utils/popupStateMapping");
var _CompositeList = require("../../composite/list/CompositeList");
var _inertValue = require("../../utils/inertValue");
var _InternalBackdrop = require("../../utils/InternalBackdrop");
var _MenuPortalContext = require("../portal/MenuPortalContext");
var _constants = require("../../utils/constants");
var _ContextMenuRootContext = require("../../context-menu/root/ContextMenuRootContext");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * Positions the menu popup against the trigger.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Menu](https://base-ui.com/react/components/menu)
 */
const MenuPositioner = exports.MenuPositioner = /*#__PURE__*/React.forwardRef(function MenuPositioner(props, forwardedRef) {
  const {
    anchor: anchorProp,
    positionMethod: positionMethodProp = 'absolute',
    className,
    render,
    side,
    align: alignProp,
    sideOffset: sideOffsetProp = 0,
    alignOffset: alignOffsetProp = 0,
    collisionBoundary = 'clipping-ancestors',
    collisionPadding = 5,
    arrowPadding = 5,
    sticky = false,
    trackAnchor = true,
    collisionAvoidance = _constants.DROPDOWN_COLLISION_AVOIDANCE,
    ...otherProps
  } = props;
  const {
    open,
    setOpen,
    floatingRootContext,
    setPositionerElement,
    itemDomElements,
    itemLabels,
    mounted,
    modal,
    lastOpenChangeReason,
    parent,
    setHoverEnabled
  } = (0, _MenuRootContext.useMenuRootContext)();
  const keepMounted = (0, _MenuPortalContext.useMenuPortalContext)();
  const nodeId = (0, _react2.useFloatingNodeId)();
  const parentNodeId = (0, _react2.useFloatingParentNodeId)();
  const contextMenuContext = (0, _ContextMenuRootContext.useContextMenuRootContext)(true);
  let anchor = anchorProp;
  let sideOffset = sideOffsetProp;
  let alignOffset = alignOffsetProp;
  let align = alignProp;
  if (parent.type === 'context-menu') {
    anchor = parent.context?.anchor ?? anchorProp;
    align = props.align ?? 'start';
    alignOffset = props.alignOffset ?? 2;
    sideOffset = props.sideOffset ?? -5;
  }
  let computedSide = side;
  let computedAlign = align;
  if (parent.type === 'menu') {
    computedSide = computedSide ?? 'inline-end';
    computedAlign = computedAlign ?? 'start';
  } else if (parent.type === 'menubar') {
    computedSide = computedSide ?? 'bottom';
    computedAlign = computedAlign ?? 'start';
  }
  const contextMenu = parent.type === 'context-menu';
  const positioner = (0, _useAnchorPositioning.useAnchorPositioning)({
    anchor,
    floatingRootContext,
    positionMethod: contextMenuContext ? 'fixed' : positionMethodProp,
    mounted,
    side: computedSide,
    sideOffset,
    align: computedAlign,
    alignOffset,
    arrowPadding: contextMenu ? 0 : arrowPadding,
    collisionBoundary,
    collisionPadding,
    sticky,
    nodeId,
    keepMounted,
    trackAnchor,
    collisionAvoidance,
    shiftCrossAxis: contextMenu
  });
  const {
    events: menuEvents
  } = (0, _react2.useFloatingTree)();
  const positionerProps = React.useMemo(() => {
    const hiddenStyles = {};
    if (!open) {
      hiddenStyles.pointerEvents = 'none';
    }
    return {
      role: 'presentation',
      hidden: !mounted,
      style: {
        ...positioner.positionerStyles,
        ...hiddenStyles
      }
    };
  }, [open, mounted, positioner.positionerStyles]);
  React.useEffect(() => {
    function onMenuOpenChange(event) {
      if (event.open) {
        if (event.parentNodeId === nodeId) {
          setHoverEnabled(false);
        }
        if (event.nodeId !== nodeId && event.parentNodeId === parentNodeId) {
          setOpen(false, undefined, 'sibling-open');
        }
      } else if (event.parentNodeId === nodeId) {
        setHoverEnabled(true);
      }
    }
    menuEvents.on('openchange', onMenuOpenChange);
    return () => {
      menuEvents.off('openchange', onMenuOpenChange);
    };
  }, [menuEvents, nodeId, parentNodeId, setOpen, setHoverEnabled]);
  React.useEffect(() => {
    menuEvents.emit('openchange', {
      open,
      nodeId,
      parentNodeId
    });
  }, [menuEvents, open, nodeId, parentNodeId]);
  const state = React.useMemo(() => ({
    open,
    side: positioner.side,
    align: positioner.align,
    anchorHidden: positioner.anchorHidden,
    nested: parent.type === 'menu'
  }), [open, positioner.side, positioner.align, positioner.anchorHidden, parent.type]);
  const contextValue = React.useMemo(() => ({
    side: positioner.side,
    align: positioner.align,
    arrowRef: positioner.arrowRef,
    arrowUncentered: positioner.arrowUncentered,
    arrowStyles: positioner.arrowStyles,
    floatingContext: positioner.context
  }), [positioner.side, positioner.align, positioner.arrowRef, positioner.arrowUncentered, positioner.arrowStyles, positioner.context]);
  const mergedRef = (0, _useForkRef.useForkRef)(forwardedRef, setPositionerElement);
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    render: render ?? 'div',
    className,
    state,
    customStyleHookMapping: _popupStateMapping.popupStateMapping,
    ref: mergedRef,
    extraProps: {
      ...positionerProps,
      ...otherProps
    }
  });
  const shouldRenderBackdrop = mounted && parent.type !== 'menu' && (parent.type !== 'menubar' && modal && lastOpenChangeReason !== 'trigger-hover' || parent.type === 'menubar' && parent.context.modal);
  const backdropCutout = parent.type === 'menubar' ? parent.context.contentElement : undefined;
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_MenuPositionerContext.MenuPositionerContext.Provider, {
    value: contextValue,
    children: [shouldRenderBackdrop && /*#__PURE__*/(0, _jsxRuntime.jsx)(_InternalBackdrop.InternalBackdrop, {
      ref: parent.type === 'context-menu' || parent.type === 'nested-context-menu' ? parent.context.internalBackdropRef : null,
      inert: (0, _inertValue.inertValue)(!open),
      cutout: backdropCutout
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_react2.FloatingNode, {
      id: nodeId,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_CompositeList.CompositeList, {
        elementsRef: itemDomElements,
        labelsRef: itemLabels,
        children: renderElement()
      })
    })]
  });
});
if (process.env.NODE_ENV !== "production") MenuPositioner.displayName = "MenuPositioner";