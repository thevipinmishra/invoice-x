"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuSubmenuTrigger = void 0;
var React = _interopRequireWildcard(require("react"));
var _react2 = require("@floating-ui/react");
var _MenuRootContext = require("../root/MenuRootContext");
var _useBaseUiId = require("../../utils/useBaseUiId");
var _useComponentRenderer = require("../../utils/useComponentRenderer");
var _useForkRef = require("../../utils/useForkRef");
var _popupStateMapping = require("../../utils/popupStateMapping");
var _useCompositeListItem = require("../../composite/list/useCompositeListItem");
var _mergeProps = require("../../merge-props");
var _useMenuItem = require("../item/useMenuItem");
/**
 * A menu item that opens a submenu.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Menu](https://base-ui.com/react/components/menu)
 */
const MenuSubmenuTrigger = exports.MenuSubmenuTrigger = /*#__PURE__*/React.forwardRef(function SubmenuTriggerComponent(props, forwardedRef) {
  const {
    render,
    className,
    label,
    id: idProp,
    ...other
  } = props;
  const id = (0, _useBaseUiId.useBaseUiId)(idProp);
  const {
    triggerProps: rootTriggerProps,
    parent,
    setTriggerElement,
    open,
    typingRef,
    disabled,
    allowMouseUpTriggerRef
  } = (0, _MenuRootContext.useMenuRootContext)();
  if (parent.type !== 'menu') {
    throw new Error('Base UI: SubmenuTrigger must be placed in a nested Menu.');
  }
  const parentMenuContext = parent.context;
  const {
    activeIndex,
    itemProps,
    setActiveIndex
  } = parentMenuContext;
  const item = (0, _useCompositeListItem.useCompositeListItem)();
  const highlighted = activeIndex === item.index;
  const mergedRef = (0, _useForkRef.useForkRef)(forwardedRef, item.ref);
  const {
    events: menuEvents
  } = (0, _react2.useFloatingTree)();
  const {
    getItemProps,
    rootRef: menuItemRef
  } = (0, _useMenuItem.useMenuItem)({
    closeOnClick: false,
    disabled,
    highlighted,
    id,
    menuEvents,
    ref: mergedRef,
    allowMouseUpTriggerRef,
    typingRef
  });
  const triggerRef = React.useRef(null);
  const menuTriggerRef = (0, _useForkRef.useForkRef)(triggerRef, menuItemRef, setTriggerElement);
  const getTriggerProps = React.useCallback(externalProps => {
    return {
      ...getItemProps(externalProps),
      tabIndex: open || highlighted ? 0 : -1,
      ref: menuTriggerRef,
      onBlur() {
        if (highlighted) {
          setActiveIndex(null);
        }
      }
    };
  }, [getItemProps, highlighted, menuTriggerRef, open, setActiveIndex]);
  const state = React.useMemo(() => ({
    disabled,
    highlighted,
    open
  }), [disabled, highlighted, open]);
  const {
    renderElement
  } = (0, _useComponentRenderer.useComponentRenderer)({
    render: render || 'div',
    className,
    state,
    propGetter: externalProps => (0, _mergeProps.mergeProps)(rootTriggerProps, itemProps, externalProps, getTriggerProps),
    customStyleHookMapping: _popupStateMapping.triggerOpenStateMapping,
    extraProps: other
  });
  return renderElement();
});
if (process.env.NODE_ENV !== "production") MenuSubmenuTrigger.displayName = "MenuSubmenuTrigger";