'use client';

import * as React from 'react';
import { useAlertDialogRootContext } from "../root/AlertDialogRootContext.js";
import { useComponentRenderer } from "../../utils/useComponentRenderer.js";
import { popupStateMapping as baseMapping } from "../../utils/popupStateMapping.js";
import { transitionStatusMapping } from "../../utils/styleHookMapping.js";
import { useForkRef } from "../../utils/useForkRef.js";
import { mergeProps } from "../../merge-props/index.js";
const customStyleHookMapping = {
  ...baseMapping,
  ...transitionStatusMapping
};

/**
 * An overlay displayed beneath the popup.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Alert Dialog](https://base-ui.com/react/components/alert-dialog)
 */
export const AlertDialogBackdrop = /*#__PURE__*/React.forwardRef(function AlertDialogBackdrop(props, forwardedRef) {
  const {
    render,
    className,
    ...other
  } = props;
  const {
    open,
    nested,
    mounted,
    transitionStatus,
    backdropRef
  } = useAlertDialogRootContext();
  const state = React.useMemo(() => ({
    open,
    transitionStatus
  }), [open, transitionStatus]);
  const mergedRef = useForkRef(backdropRef, forwardedRef);
  const {
    renderElement
  } = useComponentRenderer({
    render: render ?? 'div',
    className,
    state,
    ref: mergedRef,
    extraProps: mergeProps({
      role: 'presentation',
      hidden: !mounted,
      style: {
        userSelect: 'none',
        WebkitUserSelect: 'none'
      }
    }, other),
    customStyleHookMapping
  });

  // no need to render nested backdrops
  const shouldRender = !nested;
  if (!shouldRender) {
    return null;
  }
  return renderElement();
});
if (process.env.NODE_ENV !== "production") AlertDialogBackdrop.displayName = "AlertDialogBackdrop";