'use client';

import * as React from 'react';
import { FloatingFocusManager } from '@floating-ui/react';
import { useDialogPopup } from "../../dialog/popup/useDialogPopup.js";
import { useAlertDialogRootContext } from "../root/AlertDialogRootContext.js";
import { useComponentRenderer } from "../../utils/useComponentRenderer.js";
import { popupStateMapping as baseMapping } from "../../utils/popupStateMapping.js";
import { useForkRef } from "../../utils/useForkRef.js";
import { transitionStatusMapping } from "../../utils/styleHookMapping.js";
import { AlertDialogPopupDataAttributes } from "./AlertDialogPopupDataAttributes.js";
import { InternalBackdrop } from "../../utils/InternalBackdrop.js";
import { useAlertDialogPortalContext } from "../portal/AlertDialogPortalContext.js";
import { useOpenChangeComplete } from "../../utils/useOpenChangeComplete.js";
import { inertValue } from "../../utils/inertValue.js";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const customStyleHookMapping = {
  ...baseMapping,
  ...transitionStatusMapping,
  nestedDialogOpen(value) {
    return value ? {
      [AlertDialogPopupDataAttributes.nestedDialogOpen]: ''
    } : null;
  }
};

/**
 * A container for the alert dialog contents.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Alert Dialog](https://base-ui.com/react/components/alert-dialog)
 */
export const AlertDialogPopup = /*#__PURE__*/React.forwardRef(function AlertDialogPopup(props, forwardedRef) {
  const {
    className,
    render,
    initialFocus,
    finalFocus,
    ...other
  } = props;
  const {
    descriptionElementId,
    floatingRootContext,
    getPopupProps,
    mounted,
    nested,
    nestedOpenDialogCount,
    setOpen,
    open,
    openMethod,
    popupRef,
    setPopupElement,
    titleElementId,
    transitionStatus,
    modal,
    onOpenChangeComplete,
    internalBackdropRef
  } = useAlertDialogRootContext();
  useAlertDialogPortalContext();
  useOpenChangeComplete({
    open,
    ref: popupRef,
    onComplete() {
      if (open) {
        onOpenChangeComplete?.(true);
      }
    }
  });
  const mergedRef = useForkRef(forwardedRef, popupRef);
  const {
    getRootProps,
    resolvedInitialFocus
  } = useDialogPopup({
    descriptionElementId,
    getPopupProps,
    initialFocus,
    modal: true,
    mounted,
    setOpen,
    openMethod,
    ref: mergedRef,
    setPopupElement,
    titleElementId
  });
  const nestedDialogOpen = nestedOpenDialogCount > 0;
  const state = React.useMemo(() => ({
    open,
    nested,
    transitionStatus,
    nestedDialogOpen
  }), [open, nested, transitionStatus, nestedDialogOpen]);
  const {
    renderElement
  } = useComponentRenderer({
    render: render ?? 'div',
    className,
    state,
    propGetter: getRootProps,
    extraProps: {
      ...other,
      style: {
        ...other.style,
        '--nested-dialogs': nestedOpenDialogCount
      },
      role: 'alertdialog'
    },
    customStyleHookMapping
  });
  return /*#__PURE__*/_jsxs(React.Fragment, {
    children: [mounted && modal && /*#__PURE__*/_jsx(InternalBackdrop, {
      ref: internalBackdropRef,
      inert: inertValue(!open)
    }), /*#__PURE__*/_jsx(FloatingFocusManager, {
      context: floatingRootContext,
      disabled: !mounted,
      initialFocus: resolvedInitialFocus,
      returnFocus: finalFocus,
      children: renderElement()
    })]
  });
});
if (process.env.NODE_ENV !== "production") AlertDialogPopup.displayName = "AlertDialogPopup";