'use client';

import * as React from 'react';
import { SHIFT } from "../composite/composite.js";
import { CompositeRoot } from "../composite/root/CompositeRoot.js";
import { useComponentRenderer } from "../utils/useComponentRenderer.js";
import { useEventCallback } from "../utils/useEventCallback.js";
import { useDirection } from "../direction-provider/DirectionContext.js";
import { useRadioGroup } from "./useRadioGroup.js";
import { RadioGroupContext } from "./RadioGroupContext.js";
import { useFieldRootContext } from "../field/root/FieldRootContext.js";
import { fieldValidityMapping } from "../field/utils/constants.js";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const MODIFIER_KEYS = [SHIFT];

/**
 * Provides a shared state to a series of radio buttons.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Radio Group](https://base-ui.com/react/components/radio)
 */
export const RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, forwardedRef) {
  const {
    render,
    className,
    disabled: disabledProp,
    readOnly,
    required,
    onValueChange: onValueChangeProp,
    value,
    defaultValue,
    name: nameProp,
    inputRef,
    ...otherProps
  } = props;
  const direction = useDirection();
  const radioGroup = useRadioGroup(props);
  const {
    state: fieldState,
    disabled: fieldDisabled,
    name: fieldName
  } = useFieldRootContext();
  const disabled = fieldDisabled || disabledProp;
  const name = fieldName ?? nameProp;
  const onValueChange = useEventCallback(onValueChangeProp);
  const state = React.useMemo(() => ({
    ...fieldState,
    disabled: disabled ?? false,
    required: required ?? false,
    readOnly: readOnly ?? false
  }), [fieldState, disabled, readOnly, required]);
  const contextValue = React.useMemo(() => ({
    ...fieldState,
    ...radioGroup,
    onValueChange,
    disabled,
    readOnly,
    required,
    name
  }), [fieldState, disabled, onValueChange, radioGroup, readOnly, required, name]);
  const {
    renderElement
  } = useComponentRenderer({
    propGetter: radioGroup.getRootProps,
    render: render ?? 'div',
    ref: forwardedRef,
    className,
    state,
    extraProps: otherProps,
    customStyleHookMapping: fieldValidityMapping
  });
  return /*#__PURE__*/_jsxs(RadioGroupContext.Provider, {
    value: contextValue,
    children: [/*#__PURE__*/_jsx(CompositeRoot, {
      direction: direction,
      enableHomeAndEndKeys: false,
      modifierKeys: MODIFIER_KEYS,
      render: renderElement(),
      stopEventPropagation: true
    }), /*#__PURE__*/_jsx("input", {
      ...radioGroup.getInputProps()
    })]
  });
});
if (process.env.NODE_ENV !== "production") RadioGroup.displayName = "RadioGroup";