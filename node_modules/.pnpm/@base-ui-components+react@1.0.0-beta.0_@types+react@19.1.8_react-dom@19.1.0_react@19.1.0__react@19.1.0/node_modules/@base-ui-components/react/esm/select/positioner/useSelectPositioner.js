import * as React from 'react';
import { useAnchorPositioning } from "../../utils/useAnchorPositioning.js";
import { mergeProps } from "../../merge-props/index.js";
import { useSelectRootContext } from "../root/SelectRootContext.js";
import { useScrollLock } from "../../utils/useScrollLock.js";
export function useSelectPositioner(params) {
  const {
    alignItemWithTriggerActive
  } = params;
  const {
    open,
    mounted,
    triggerElement,
    modal
  } = useSelectRootContext();
  useScrollLock({
    enabled: (alignItemWithTriggerActive || modal) && open,
    mounted,
    open,
    referenceElement: triggerElement
  });
  const positioning = useAnchorPositioning({
    ...params,
    trackAnchor: params.trackAnchor ?? !alignItemWithTriggerActive
  });
  const positionerStyles = React.useMemo(() => alignItemWithTriggerActive ? {
    position: 'fixed'
  } : positioning.positionerStyles, [alignItemWithTriggerActive, positioning.positionerStyles]);
  const getPositionerProps = React.useCallback((externalProps = {}) => {
    const hiddenStyles = {};
    if (!open) {
      hiddenStyles.pointerEvents = 'none';
    }
    return mergeProps({
      role: 'presentation',
      hidden: !mounted,
      style: {
        ...positionerStyles,
        ...hiddenStyles
      }
    }, externalProps);
  }, [open, mounted, positionerStyles]);
  return React.useMemo(() => ({
    ...positioning,
    side: alignItemWithTriggerActive ? 'none' : positioning.side,
    getPositionerProps
  }), [getPositionerProps, positioning, alignItemWithTriggerActive]);
}