'use client';

import * as React from 'react';
import { useSelectRootContext } from "../root/SelectRootContext.js";
import { CompositeList } from "../../composite/list/CompositeList.js";
import { popupStateMapping } from "../../utils/popupStateMapping.js";
import { useSelectPositioner } from "./useSelectPositioner.js";
import { SelectPositionerContext } from "./SelectPositionerContext.js";
import { InternalBackdrop } from "../../utils/InternalBackdrop.js";
import { inertValue } from "../../utils/inertValue.js";
import { useRenderElement } from "../../utils/useRenderElement.js";
import { DROPDOWN_COLLISION_AVOIDANCE } from "../../utils/constants.js";
import { clearPositionerStyles } from "../popup/utils.js";
import { useSelectIndexContext } from "../root/SelectIndexContext.js";
import { useEventCallback } from "../../utils/useEventCallback.js";

/**
 * Positions the select menu popup.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Select](https://base-ui.com/react/components/select)
 */
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
export const SelectPositioner = /*#__PURE__*/React.forwardRef(function SelectPositioner(componentProps, forwardedRef) {
  const {
    anchor,
    positionMethod = 'absolute',
    className,
    render,
    side = 'bottom',
    align = 'center',
    sideOffset = 0,
    alignOffset = 0,
    collisionBoundary = 'clipping-ancestors',
    collisionPadding,
    arrowPadding = 5,
    sticky = false,
    trackAnchor = true,
    alignItemWithTrigger = true,
    collisionAvoidance = DROPDOWN_COLLISION_AVOIDANCE,
    ...elementProps
  } = componentProps;
  const {
    open,
    mounted,
    positionerElement,
    setPositionerElement,
    listRef,
    labelsRef,
    floatingRootContext,
    modal,
    touchModality,
    alignItemWithTriggerActiveRef,
    valuesRef,
    value,
    setLabel
  } = useSelectRootContext();
  const {
    setSelectedIndex
  } = useSelectIndexContext();
  const [scrollUpArrowVisible, setScrollUpArrowVisible] = React.useState(false);
  const [scrollDownArrowVisible, setScrollDownArrowVisible] = React.useState(false);
  const [controlledItemAnchor, setControlledItemAnchor] = React.useState(alignItemWithTrigger);
  const alignItemWithTriggerActive = mounted && controlledItemAnchor && !touchModality;
  React.useImperativeHandle(alignItemWithTriggerActiveRef, () => alignItemWithTriggerActive);
  if (!mounted && controlledItemAnchor !== alignItemWithTrigger) {
    setControlledItemAnchor(alignItemWithTrigger);
  }
  if (!alignItemWithTrigger || !mounted) {
    if (scrollUpArrowVisible) {
      setScrollUpArrowVisible(false);
    }
    if (scrollDownArrowVisible) {
      setScrollDownArrowVisible(false);
    }
  }
  const positioner = useSelectPositioner({
    anchor,
    floatingRootContext,
    positionMethod,
    mounted,
    side,
    sideOffset,
    align,
    alignOffset,
    arrowPadding,
    collisionBoundary,
    collisionPadding,
    sticky,
    trackAnchor,
    alignItemWithTriggerActive,
    collisionAvoidance,
    keepMounted: true
  });
  const state = React.useMemo(() => ({
    open,
    side: positioner.side,
    align: positioner.align,
    anchorHidden: positioner.anchorHidden
  }), [open, positioner.side, positioner.align, positioner.anchorHidden]);
  const element = useRenderElement('div', componentProps, {
    ref: [forwardedRef, setPositionerElement],
    state,
    customStyleHookMapping: popupStateMapping,
    props: [positioner.getPositionerProps, elementProps]
  });
  const contextValue = React.useMemo(() => ({
    ...positioner,
    alignItemWithTriggerActive,
    controlledItemAnchor,
    setControlledItemAnchor,
    scrollUpArrowVisible,
    setScrollUpArrowVisible,
    scrollDownArrowVisible,
    setScrollDownArrowVisible
  }), [positioner, alignItemWithTriggerActive, controlledItemAnchor, scrollUpArrowVisible, scrollDownArrowVisible]);
  const prevMapSizeRef = React.useRef(0);
  const onMapChange = useEventCallback(map => {
    if (map.size === 0 && prevMapSizeRef.current === 0) {
      return;
    }
    if (valuesRef.current.length === 0) {
      return;
    }
    const prevSize = prevMapSizeRef.current;
    prevMapSizeRef.current = map.size;
    if (map.size === prevSize) {
      return;
    }
    if (value !== null) {
      const valueIndex = valuesRef.current.indexOf(value);
      if (valueIndex === -1) {
        setSelectedIndex(null);
        setLabel('');
      }
    }
    if (open && alignItemWithTriggerActive) {
      setScrollDownArrowVisible(false);
      setScrollUpArrowVisible(false);
      if (positionerElement) {
        clearPositionerStyles(positionerElement, {
          height: ''
        });
      }
    }
  });
  return /*#__PURE__*/_jsx(CompositeList, {
    elementsRef: listRef,
    labelsRef: labelsRef,
    onMapChange: onMapChange,
    children: /*#__PURE__*/_jsxs(SelectPositionerContext.Provider, {
      value: contextValue,
      children: [mounted && modal && /*#__PURE__*/_jsx(InternalBackdrop, {
        inert: inertValue(!open)
      }), element]
    })
  });
});
if (process.env.NODE_ENV !== "production") SelectPositioner.displayName = "SelectPositioner";