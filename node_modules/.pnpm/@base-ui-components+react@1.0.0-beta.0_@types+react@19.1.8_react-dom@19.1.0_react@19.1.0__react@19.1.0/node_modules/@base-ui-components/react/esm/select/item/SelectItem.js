'use client';

import * as React from 'react';
import { useSelectRootContext } from "../root/SelectRootContext.js";
import { useSelectIndexContext } from "../root/SelectIndexContext.js";
import { useCompositeListItem } from "../../composite/list/useCompositeListItem.js";
import { useForkRef } from "../../utils/useForkRef.js";
import { useSelectItem } from "./useSelectItem.js";
import { useModernLayoutEffect } from "../../utils/useModernLayoutEffect.js";
import { useLatestRef } from "../../utils/useLatestRef.js";
import { SelectItemContext } from "./SelectItemContext.js";
import { useRenderElement } from "../../utils/useRenderElement.js";
import { jsx as _jsx } from "react/jsx-runtime";
const InnerSelectItem = /*#__PURE__*/React.memo(/*#__PURE__*/React.forwardRef(function InnerSelectItem(componentProps, forwardedRef) {
  const {
    className,
    disabled = false,
    highlighted,
    selected,
    getRootItemProps,
    render,
    setOpen,
    typingRef,
    selectionRef,
    open,
    value,
    setValue,
    selectedIndexRef,
    indexRef,
    setActiveIndex,
    popupRef,
    keyboardActiveRef,
    events,
    textRef,
    ...elementProps
  } = componentProps;
  const state = React.useMemo(() => ({
    disabled,
    selected
  }), [disabled, selected]);
  const rootProps = getRootItemProps({
    active: highlighted,
    selected
  });
  // With our custom `focusItemOnHover` implementation, this interferes with the logic and can
  // cause the index state to be stuck when leaving the select popup.
  delete rootProps.onFocus;
  delete rootProps.id;
  const {
    props,
    rootRef
  } = useSelectItem({
    open,
    setOpen,
    disabled,
    highlighted,
    selected,
    ref: forwardedRef,
    typingRef,
    handleSelect: event => setValue(value, event),
    selectionRef,
    selectedIndexRef,
    indexRef,
    setActiveIndex,
    popupRef,
    keyboardActiveRef,
    events,
    rootProps,
    elementProps
  });
  const element = useRenderElement('div', componentProps, {
    ref: [rootRef, forwardedRef],
    state,
    props
  });
  const contextValue = React.useMemo(() => ({
    selected,
    indexRef,
    textRef
  }), [selected, indexRef, textRef]);
  return /*#__PURE__*/_jsx(SelectItemContext.Provider, {
    value: contextValue,
    children: element
  });
}));

/**
 * An individual option in the select menu.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Select](https://base-ui.com/react/components/select)
 */
if (process.env.NODE_ENV !== "production") InnerSelectItem.displayName = "InnerSelectItem";
export const SelectItem = /*#__PURE__*/React.forwardRef(function SelectItem(props, forwardedRef) {
  const {
    value: valueProp = null,
    label,
    ...otherProps
  } = props;
  const textRef = React.useRef(null);
  const listItem = useCompositeListItem({
    label,
    textRef
  });
  const {
    activeIndex,
    selectedIndex,
    setActiveIndex
  } = useSelectIndexContext();
  const {
    getItemProps,
    setOpen,
    setValue,
    open,
    selectionRef,
    typingRef,
    valuesRef,
    popupRef,
    registerSelectedItem,
    value,
    keyboardActiveRef,
    floatingRootContext
  } = useSelectRootContext();
  const itemRef = React.useRef(null);
  const selectedIndexRef = useLatestRef(selectedIndex);
  const indexRef = useLatestRef(listItem.index);
  const mergedRef = useForkRef(listItem.ref, forwardedRef, itemRef);
  const hasRegistered = listItem.index !== -1;
  useModernLayoutEffect(() => {
    if (!hasRegistered) {
      return undefined;
    }
    const values = valuesRef.current;
    values[listItem.index] = valueProp;
    return () => {
      delete values[listItem.index];
    };
  }, [hasRegistered, listItem.index, valueProp, valuesRef]);
  useModernLayoutEffect(() => {
    if (hasRegistered && valueProp === value) {
      registerSelectedItem(listItem.index);
    }
  }, [hasRegistered, listItem.index, registerSelectedItem, valueProp, value]);
  const highlighted = activeIndex === listItem.index;
  const selected = selectedIndex === listItem.index;
  return /*#__PURE__*/_jsx(InnerSelectItem, {
    ref: mergedRef,
    highlighted: highlighted,
    selected: selected,
    getRootItemProps: getItemProps,
    setOpen: setOpen,
    open: open,
    selectionRef: selectionRef,
    typingRef: typingRef,
    value: valueProp,
    setValue: setValue,
    selectedIndexRef: selectedIndexRef,
    indexRef: indexRef,
    setActiveIndex: setActiveIndex,
    popupRef: popupRef,
    keyboardActiveRef: keyboardActiveRef,
    events: floatingRootContext.events,
    textRef: textRef,
    ...otherProps
  });
});
if (process.env.NODE_ENV !== "production") SelectItem.displayName = "SelectItem";