'use client';

import * as React from 'react';
import { FloatingFocusManager } from '@floating-ui/react';
import { useSelectRootContext } from "../root/SelectRootContext.js";
import { popupStateMapping } from "../../utils/popupStateMapping.js";
import { useSelectPopup } from "./useSelectPopup.js";
import { useSelectPositionerContext } from "../positioner/SelectPositionerContext.js";
import { transitionStatusMapping } from "../../utils/styleHookMapping.js";
import { useOpenChangeComplete } from "../../utils/useOpenChangeComplete.js";
import { useRenderElement } from "../../utils/useRenderElement.js";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const customStyleHookMapping = {
  ...popupStateMapping,
  ...transitionStatusMapping
};

/**
 * A container for the select items.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Select](https://base-ui.com/react/components/select)
 */
export const SelectPopup = /*#__PURE__*/React.forwardRef(function SelectPopup(componentProps, forwardedRef) {
  const {
    render,
    className,
    ...elementProps
  } = componentProps;
  const {
    id,
    open,
    popupRef,
    transitionStatus,
    mounted,
    onOpenChangeComplete,
    popupProps
  } = useSelectRootContext();
  const positioner = useSelectPositionerContext();
  useOpenChangeComplete({
    open,
    ref: popupRef,
    onComplete() {
      if (open) {
        onOpenChangeComplete?.(true);
      }
    }
  });
  const state = React.useMemo(() => ({
    open,
    transitionStatus,
    side: positioner.side,
    align: positioner.align
  }), [open, transitionStatus, positioner]);
  const {
    props
  } = useSelectPopup();
  const element = useRenderElement('div', componentProps, {
    ref: [forwardedRef, popupRef],
    state,
    customStyleHookMapping,
    props: [popupProps, props, transitionStatus === 'starting' ? {
      style: {
        transition: 'none'
      }
    } : {}, elementProps]
  });
  const popupSelector = `[data-id="${id}-popup"]`;
  const html = React.useMemo(() => ({
    __html: `${popupSelector}{scrollbar-width:none}${popupSelector}::-webkit-scrollbar{display:none}`
  }), [popupSelector]);
  return /*#__PURE__*/_jsxs(React.Fragment, {
    children: [id && positioner.alignItemWithTriggerActive && /*#__PURE__*/_jsx("style", {
      // eslint-disable-next-line react/no-danger
      dangerouslySetInnerHTML: html
    }), /*#__PURE__*/_jsx(FloatingFocusManager, {
      context: positioner.context,
      modal: false,
      disabled: !mounted,
      restoreFocus: true,
      children: element
    })]
  });
});
if (process.env.NODE_ENV !== "production") SelectPopup.displayName = "SelectPopup";