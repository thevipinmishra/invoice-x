import * as React from 'react';
import type { SelectRootContext } from "./SelectRootContext.js";
import type { SelectIndexContext } from "./SelectIndexContext.js";
import { type BaseOpenChangeReason } from "../../utils/translateOpenChangeReason.js";
export type SelectOpenChangeReason = BaseOpenChangeReason | 'window-resize';
export declare function useSelectRoot<T>(params: useSelectRoot.Parameters<T>): useSelectRoot.ReturnValue;
export declare namespace useSelectRoot {
  interface Parameters<Value> {
    /**
     * Identifies the field when a form is submitted.
     */
    name?: string;
    /**
     * The id of the Select.
     */
    id?: string;
    /**
     * Whether the user must choose a value before submitting a form.
     * @default false
     */
    required?: boolean;
    /**
     * Whether the user should be unable to choose a different option from the select menu.
     * @default false
     */
    readOnly?: boolean;
    /**
     * Whether the component should ignore user interaction.
     * @default false
     */
    disabled?: boolean;
    /**
     * The value of the select.
     */
    value?: Value | null;
    /**
     * Callback fired when the value of the select changes. Use when controlled.
     */
    onValueChange?: (value: Value, event?: Event) => void;
    /**
     * The uncontrolled value of the select when itâ€™s initially rendered.
     *
     * To render a controlled select, use the `value` prop instead.
     * @default null
     */
    defaultValue?: Value | null;
    /**
     * Whether the select menu is initially open.
     *
     * To render a controlled select menu, use the `open` prop instead.
     * @default false
     */
    defaultOpen?: boolean;
    /**
     * Event handler called when the select menu is opened or closed.
     * @type (open: boolean, event?: Event, reason?: Select.Root.OpenChangeReason) => void
     */
    onOpenChange?: (open: boolean, event: Event | undefined, reason: SelectOpenChangeReason | undefined) => void;
    /**
     * Event handler called after any animations complete when the select menu is opened or closed.
     */
    onOpenChangeComplete?: (open: boolean) => void;
    /**
     * Whether the select menu is currently open.
     */
    open?: boolean;
    /**
     * Determines if the select enters a modal state when open.
     * - `true`: user interaction is limited to the select: document page scroll is locked and and pointer interactions on outside elements are disabled.
     * - `false`: user interaction with the rest of the document is allowed.
     * @default true
     */
    modal?: boolean;
    /**
     * A ref to imperative actions.
     * - `unmount`: When specified, the select will not be unmounted when closed.
     * Instead, the `unmount` function must be called to unmount the select manually.
     * Useful when the select's animation is controlled by an external library.
     */
    actionsRef?: React.RefObject<Actions>;
  }
  interface ReturnValue {
    rootContext: SelectRootContext;
    indexContext: SelectIndexContext;
  }
  interface Actions {
    unmount: () => void;
  }
}