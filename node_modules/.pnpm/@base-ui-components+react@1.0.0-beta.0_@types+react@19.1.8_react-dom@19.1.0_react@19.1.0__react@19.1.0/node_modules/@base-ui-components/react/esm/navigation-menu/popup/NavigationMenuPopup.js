'use client';

import * as React from 'react';
import { getNextTabbable, getPreviousTabbable, isOutsideEvent } from '@floating-ui/react/utils';
import { useRenderElement } from "../../utils/useRenderElement.js";
import { useNavigationMenuRootContext } from "../root/NavigationMenuRootContext.js";
import { useModernLayoutEffect } from "../../utils/useModernLayoutEffect.js";
import { transitionStatusMapping } from "../../utils/styleHookMapping.js";
import { useBaseUiId } from "../../utils/useBaseUiId.js";
import { FocusGuard } from "../../toast/viewport/FocusGuard.js";
import { useNavigationMenuPositionerContext } from "../positioner/NavigationMenuPositionerContext.js";
import { useDirection } from "../../direction-provider/DirectionContext.js";
import { popupStateMapping as baseMapping } from "../../utils/popupStateMapping.js";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const customStyleHookMapping = {
  ...baseMapping,
  ...transitionStatusMapping
};

/**
 * A container for the navigation menu contents.
 * Renders a `<nav>` element.
 *
 * Documentation: [Base UI Navigation Menu](https://base-ui.com/react/components/navigation-menu)
 */
export const NavigationMenuPopup = /*#__PURE__*/React.forwardRef(function NavigationMenuPopup(componentProps, forwardedRef) {
  const {
    className,
    render,
    id: idProp,
    ...elementProps
  } = componentProps;
  const {
    open,
    transitionStatus,
    popupElement,
    positionerElement,
    setPopupElement,
    beforeInsideRef,
    beforeOutsideRef,
    afterInsideRef,
    afterOutsideRef
  } = useNavigationMenuRootContext();
  const positioning = useNavigationMenuPositionerContext();
  const direction = useDirection();
  const id = useBaseUiId(idProp);
  const state = React.useMemo(() => ({
    open,
    transitionStatus,
    side: positioning.side,
    align: positioning.align,
    anchorHidden: positioning.anchorHidden
  }), [open, transitionStatus, positioning.side, positioning.align, positioning.anchorHidden]);

  // Allow the arrow to transition while the popup's size transitions.
  useModernLayoutEffect(() => {
    if (!popupElement || typeof ResizeObserver === 'undefined') {
      return undefined;
    }
    const observer = new ResizeObserver(positioning.update);
    observer.observe(popupElement);
    return () => {
      observer.disconnect();
    };
  }, [popupElement, positioning.update]);

  // Ensure popup size transitions correctly when anchored to `bottom` (side=top) or `right` (side=left).
  let isOriginSide = positioning.side === 'top';
  let isPhysicalLeft = positioning.side === 'left';
  if (direction === 'rtl') {
    isOriginSide = isOriginSide || positioning.side === 'inline-end';
    isPhysicalLeft = isPhysicalLeft || positioning.side === 'inline-end';
  } else {
    isOriginSide = isOriginSide || positioning.side === 'inline-start';
    isPhysicalLeft = isPhysicalLeft || positioning.side === 'inline-start';
  }
  const element = useRenderElement('nav', componentProps, {
    state,
    ref: [forwardedRef, setPopupElement],
    props: [{
      id,
      tabIndex: -1,
      style: isOriginSide ? {
        position: 'absolute',
        [positioning.side === 'top' ? 'bottom' : 'top']: '0',
        [isPhysicalLeft ? 'right' : 'left']: '0'
      } : {}
    }, elementProps],
    customStyleHookMapping
  });
  return /*#__PURE__*/_jsxs(React.Fragment, {
    children: [/*#__PURE__*/_jsx(FocusGuard, {
      ref: beforeInsideRef,
      onFocus: event => {
        if (positionerElement && isOutsideEvent(event, positionerElement)) {
          getNextTabbable(positionerElement)?.focus();
        } else {
          beforeOutsideRef.current?.focus();
        }
      }
    }), element, /*#__PURE__*/_jsx(FocusGuard, {
      ref: afterInsideRef,
      onFocus: event => {
        if (positionerElement && isOutsideEvent(event, positionerElement)) {
          getPreviousTabbable(positionerElement)?.focus();
        } else {
          afterOutsideRef.current?.focus();
        }
      }
    })]
  });
});
if (process.env.NODE_ENV !== "production") NavigationMenuPopup.displayName = "NavigationMenuPopup";