'use client';

import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { FloatingNode } from '@floating-ui/react';
import { contains } from '@floating-ui/react/utils';
import { useRenderElement } from "../../utils/useRenderElement.js";
import { useNavigationMenuRootContext, useNavigationMenuTreeContext } from "../root/NavigationMenuRootContext.js";
import { useNavigationMenuItemContext } from "../item/NavigationMenuItemContext.js";
import { useTransitionStatus } from "../../utils/useTransitionStatus.js";
import { useOpenChangeComplete } from "../../utils/useOpenChangeComplete.js";
import { transitionStatusMapping } from "../../utils/styleHookMapping.js";
import { CompositeRoot } from "../../composite/root/CompositeRoot.js";
import { inertValue } from "../../utils/inertValue.js";
import { popupStateMapping } from "../../utils/popupStateMapping.js";
import { jsx as _jsx } from "react/jsx-runtime";
const customStyleHookMapping = {
  ...popupStateMapping,
  ...transitionStatusMapping,
  activationDirection(value) {
    if (value === 'left') {
      return {
        'data-activation-direction': 'left'
      };
    }
    if (value === 'right') {
      return {
        'data-activation-direction': 'right'
      };
    }
    return null;
  }
};

/**
 * A container for the content of the navigation menu item that is moved into the popup
 * when the item is active.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Navigation Menu](https://base-ui.com/react/components/navigation-menu)
 */
export const NavigationMenuContent = /*#__PURE__*/React.forwardRef(function NavigationMenuContent(componentProps, forwardedRef) {
  const {
    className,
    render,
    ...elementProps
  } = componentProps;
  const {
    mounted: popupMounted,
    viewportElement,
    value,
    activationDirection,
    currentContentRef
  } = useNavigationMenuRootContext();
  const itemValue = useNavigationMenuItemContext();
  const nodeId = useNavigationMenuTreeContext();
  const open = popupMounted && value === itemValue;
  const ref = React.useRef(null);
  const [focusInside, setFocusInside] = React.useState(false);
  const {
    mounted,
    setMounted,
    transitionStatus
  } = useTransitionStatus(open);
  useOpenChangeComplete({
    ref,
    open,
    onComplete() {
      if (!open) {
        setMounted(false);
      }
    }
  });
  const state = React.useMemo(() => ({
    open,
    transitionStatus,
    activationDirection
  }), [open, transitionStatus, activationDirection]);
  const handleCurrentContentRef = React.useCallback(node => {
    if (node) {
      currentContentRef.current = node;
    }
  }, [currentContentRef]);
  const commonProps = {
    onFocus() {
      setFocusInside(true);
    },
    onBlur(event) {
      if (!contains(event.currentTarget, event.relatedTarget)) {
        setFocusInside(false);
      }
    }
  };
  const shouldRender = viewportElement !== null && mounted;
  const element = useRenderElement('div', componentProps, {
    enabled: shouldRender,
    state,
    ref: [forwardedRef, ref, handleCurrentContentRef],
    props: [!open && mounted ? {
      style: {
        position: 'absolute',
        top: 0,
        left: 0
      },
      inert: inertValue(!focusInside),
      ...commonProps
    } : commonProps, elementProps],
    customStyleHookMapping
  });
  if (!viewportElement || !element) {
    return null;
  }
  return /*#__PURE__*/ReactDOM.createPortal(/*#__PURE__*/_jsx(FloatingNode, {
    id: nodeId,
    children: /*#__PURE__*/_jsx(CompositeRoot, {
      render: element,
      stopEventPropagation: true
    })
  }), viewportElement);
});
if (process.env.NODE_ENV !== "production") NavigationMenuContent.displayName = "NavigationMenuContent";