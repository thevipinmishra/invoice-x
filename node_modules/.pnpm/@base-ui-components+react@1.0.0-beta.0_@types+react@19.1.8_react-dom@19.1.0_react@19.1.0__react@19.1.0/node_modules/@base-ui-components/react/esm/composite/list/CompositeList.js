/* eslint-disable no-bitwise */
'use client';

import * as React from 'react';
import { CompositeListContext } from "./CompositeListContext.js";
import { useModernLayoutEffect } from "../../utils/useModernLayoutEffect.js";
import { jsx as _jsx } from "react/jsx-runtime";
function sortByDocumentPosition(a, b) {
  const position = a.compareDocumentPosition(b);
  if (position & Node.DOCUMENT_POSITION_FOLLOWING || position & Node.DOCUMENT_POSITION_CONTAINED_BY) {
    return -1;
  }
  if (position & Node.DOCUMENT_POSITION_PRECEDING || position & Node.DOCUMENT_POSITION_CONTAINS) {
    return 1;
  }
  return 0;
}
/**
 * Provides context for a list of items in a composite component.
 * @internal
 */
export function CompositeList(props) {
  const {
    children,
    elementsRef,
    labelsRef,
    onMapChange
  } = props;
  const [map, setMap] = React.useState(() => new Map());
  const register = React.useCallback((node, metadata) => {
    setMap(prevMap => new Map(prevMap).set(node, metadata ?? null));
  }, []);
  const unregister = React.useCallback(node => {
    setMap(prevMap => {
      const nextMap = new Map(prevMap);
      nextMap.delete(node);
      return nextMap;
    });
  }, []);
  const sortedMap = React.useMemo(() => {
    const newMap = new Map();
    const sortedNodes = Array.from(map.keys()).sort(sortByDocumentPosition);
    sortedNodes.forEach((node, index) => {
      const metadata = map.get(node) ?? {};
      newMap.set(node, {
        ...metadata,
        index
      });
    });
    return newMap;
  }, [map]);
  useModernLayoutEffect(() => {
    if (elementsRef.current.length !== sortedMap.size) {
      elementsRef.current.length = sortedMap.size;
    }
    if (labelsRef && labelsRef.current.length !== sortedMap.size) {
      labelsRef.current.length = sortedMap.size;
    }
    onMapChange?.(sortedMap);
  }, [sortedMap, onMapChange, elementsRef, labelsRef]);
  const contextValue = React.useMemo(() => ({
    register,
    unregister,
    map: sortedMap,
    elementsRef,
    labelsRef
  }), [register, unregister, sortedMap, elementsRef, labelsRef]);
  return /*#__PURE__*/_jsx(CompositeListContext.Provider, {
    value: contextValue,
    children: children
  });
}