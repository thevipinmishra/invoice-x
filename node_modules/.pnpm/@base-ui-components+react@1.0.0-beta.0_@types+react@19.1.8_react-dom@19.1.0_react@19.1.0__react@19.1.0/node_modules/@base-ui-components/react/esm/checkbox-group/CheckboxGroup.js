'use client';

import * as React from 'react';
import { useBaseUiId } from "../utils/useBaseUiId.js";
import { useComponentRenderer } from "../utils/useComponentRenderer.js";
import { useEventCallback } from "../utils/useEventCallback.js";
import { useCheckboxGroup } from "./useCheckboxGroup.js";
import { CheckboxGroupContext } from "./CheckboxGroupContext.js";
import { useFieldRootContext } from "../field/root/FieldRootContext.js";
import { fieldValidityMapping } from "../field/utils/constants.js";
import { useField } from "../field/useField.js";
import { useFieldControlValidation } from "../field/control/useFieldControlValidation.js";
import { PARENT_CHECKBOX } from "../checkbox/root/useCheckboxRoot.js";

/**
 * Provides a shared state to a series of checkboxes.
 *
 * Documentation: [Base UI Checkbox Group](https://base-ui.com/react/components/checkbox-group)
 */
import { jsx as _jsx } from "react/jsx-runtime";
export const CheckboxGroup = /*#__PURE__*/React.forwardRef(function CheckboxGroup(props, forwardedRef) {
  const {
    render,
    className,
    value: externalValue,
    defaultValue,
    onValueChange,
    allValues,
    disabled: disabledProp = false,
    id: idProp,
    ...otherProps
  } = props;
  const {
    disabled: fieldDisabled,
    state: fieldState,
    name: fieldName
  } = useFieldRootContext();
  const disabled = fieldDisabled || disabledProp;
  const fieldControlValidation = useFieldControlValidation();
  const {
    getRootProps,
    value,
    setValue,
    parent
  } = useCheckboxGroup({
    value: externalValue,
    allValues,
    defaultValue,
    onValueChange
  });
  const id = useBaseUiId(idProp);
  const controlRef = React.useRef(null);
  const registerControlRef = useEventCallback(element => {
    if (controlRef.current == null && element != null && !element.hasAttribute(PARENT_CHECKBOX)) {
      controlRef.current = element;
    }
  });
  useField({
    enabled: !!fieldName,
    id,
    commitValidation: fieldControlValidation.commitValidation,
    value,
    controlRef
  });
  const state = React.useMemo(() => ({
    ...fieldState,
    disabled
  }), [fieldState, disabled]);
  const {
    renderElement
  } = useComponentRenderer({
    propGetter: getRootProps,
    render: render ?? 'div',
    className,
    state,
    ref: forwardedRef,
    extraProps: otherProps,
    customStyleHookMapping: fieldValidityMapping
  });
  const contextValue = React.useMemo(() => ({
    allValues,
    value,
    defaultValue,
    setValue,
    parent,
    disabled,
    fieldControlValidation,
    registerControlRef
  }), [allValues, value, defaultValue, setValue, parent, disabled, fieldControlValidation, registerControlRef]);
  return /*#__PURE__*/_jsx(CheckboxGroupContext.Provider, {
    value: contextValue,
    children: renderElement()
  });
});
if (process.env.NODE_ENV !== "production") CheckboxGroup.displayName = "CheckboxGroup";