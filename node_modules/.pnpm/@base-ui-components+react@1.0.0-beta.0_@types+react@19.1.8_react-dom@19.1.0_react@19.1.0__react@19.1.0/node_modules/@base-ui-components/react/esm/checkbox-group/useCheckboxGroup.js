'use client';

import * as React from 'react';
import { mergeProps } from "../merge-props/index.js";
import { useControlled } from "../utils/useControlled.js";
import { useEventCallback } from "../utils/useEventCallback.js";
import { useCheckboxGroupParent } from "./useCheckboxGroupParent.js";
import { useFieldRootContext } from "../field/root/FieldRootContext.js";
export function useCheckboxGroup(params) {
  const {
    allValues,
    value: externalValue,
    defaultValue,
    onValueChange
  } = params;
  const {
    labelId
  } = useFieldRootContext();
  const [value, setValueUnwrapped] = useControlled({
    controlled: externalValue,
    default: defaultValue,
    name: 'CheckboxGroup',
    state: 'value'
  });
  const setValue = useEventCallback((v, event) => {
    setValueUnwrapped(v);
    onValueChange?.(v, event);
  });
  const parent = useCheckboxGroupParent({
    allValues,
    value: externalValue,
    onValueChange
  });
  const getRootProps = React.useCallback((externalProps = {}) => mergeProps({
    role: 'group',
    'aria-labelledby': labelId
  }, externalProps), [labelId]);
  return React.useMemo(() => ({
    getRootProps,
    value,
    setValue,
    parent
  }), [getRootProps, value, setValue, parent]);
}