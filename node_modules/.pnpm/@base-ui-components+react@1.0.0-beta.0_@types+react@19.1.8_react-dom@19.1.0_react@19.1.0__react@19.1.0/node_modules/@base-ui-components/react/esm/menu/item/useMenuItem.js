'use client';

import * as React from 'react';
import { useButton } from "../../use-button/index.js";
import { mergeProps } from "../../merge-props/index.js";
import { useForkRef } from "../../utils/useForkRef.js";
import { useModernLayoutEffect } from "../../utils/index.js";
import { addHighlight, removeHighlight } from "../../utils/highlighted.js";
export function useMenuItem(params) {
  const {
    closeOnClick,
    disabled = false,
    highlighted,
    id,
    menuEvents,
    ref: externalRef,
    allowMouseUpTriggerRef,
    typingRef
  } = params;
  const itemRef = React.useRef(null);
  const {
    getButtonProps,
    buttonRef: mergedRef
  } = useButton({
    disabled,
    focusableWhenDisabled: true,
    buttonRef: useForkRef(externalRef, itemRef)
  });
  useModernLayoutEffect(() => {
    if (highlighted) {
      addHighlight(itemRef);
    } else {
      removeHighlight(itemRef);
    }
  }, [highlighted]);
  const getItemProps = React.useCallback(externalProps => {
    return mergeProps({
      id,
      role: 'menuitem',
      tabIndex: highlighted ? 0 : -1,
      onKeyUp: event => {
        if (event.key === ' ' && typingRef.current) {
          event.preventBaseUIHandler();
        }
      },
      onClick: event => {
        if (closeOnClick) {
          menuEvents.emit('close', {
            domEvent: event,
            reason: 'item-press'
          });
        }
      },
      onMouseUp: event => {
        if (itemRef.current && allowMouseUpTriggerRef.current) {
          // This fires whenever the user clicks on the trigger, moves the cursor, and releases it over the item.
          // We trigger the click and override the `closeOnClick` preference to always close the menu.
          itemRef.current.click();
          menuEvents.emit('close', {
            domEvent: event,
            reason: 'item-press'
          });
        }
      }
    }, externalProps, getButtonProps);
  }, [getButtonProps, id, highlighted, typingRef, closeOnClick, menuEvents, allowMouseUpTriggerRef]);
  return React.useMemo(() => ({
    getItemProps,
    rootRef: mergedRef
  }), [getItemProps, mergedRef]);
}