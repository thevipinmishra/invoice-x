'use client';

import * as React from 'react';
import { contains } from '@floating-ui/react/utils';
import { CompositeItem } from "../../composite/item/CompositeItem.js";
import { useMenuRootContext } from "../root/MenuRootContext.js";
import { pressableTriggerOpenStateMapping } from "../../utils/popupStateMapping.js";
import { useComponentRenderer } from "../../utils/useComponentRenderer.js";
import { useForkRef } from "../../utils/useForkRef.js";
import { mergeProps } from "../../merge-props/index.js";
import { useButton } from "../../use-button/useButton.js";
import { useTimeout } from "../../utils/useTimeout.js";
import { ownerDocument } from "../../utils/owner.js";
import { getPseudoElementBounds } from "../../utils/getPseudoElementBounds.js";
import { useEventCallback } from "../../utils/useEventCallback.js";
import { jsx as _jsx } from "react/jsx-runtime";
const BOUNDARY_OFFSET = 2;

/**
 * A button that opens the menu.
 * Renders a `<button>` element.
 *
 * Documentation: [Base UI Menu](https://base-ui.com/react/components/menu)
 */
export const MenuTrigger = /*#__PURE__*/React.forwardRef(function MenuTrigger(props, forwardedRef) {
  const {
    render,
    className,
    disabled: disabledProp = false,
    ...other
  } = props;
  const {
    triggerProps: rootTriggerProps,
    disabled: menuDisabled,
    setTriggerElement,
    open,
    setOpen,
    allowMouseUpTriggerRef,
    positionerRef,
    parent,
    lastOpenChangeReason
  } = useMenuRootContext();
  const disabled = disabledProp || menuDisabled;
  const triggerRef = React.useRef(null);
  const mergedRef = useForkRef(forwardedRef, triggerRef);
  const allowMouseUpTriggerTimeout = useTimeout();
  const {
    getButtonProps,
    buttonRef
  } = useButton({
    disabled,
    buttonRef: mergedRef
  });
  const handleRef = useForkRef(buttonRef, setTriggerElement);
  React.useEffect(() => {
    if (!open && parent.type === undefined) {
      allowMouseUpTriggerRef.current = false;
    }
  }, [allowMouseUpTriggerRef, open, parent.type]);
  const handleMouseUp = useEventCallback(mouseEvent => {
    if (!triggerRef.current) {
      return;
    }
    allowMouseUpTriggerTimeout.clear();
    allowMouseUpTriggerRef.current = false;
    const mouseUpTarget = mouseEvent.target;
    if (contains(triggerRef.current, mouseUpTarget) || contains(positionerRef.current, mouseUpTarget) || mouseUpTarget === triggerRef.current) {
      return;
    }
    const bounds = getPseudoElementBounds(triggerRef.current);
    if (mouseEvent.clientX >= bounds.left - BOUNDARY_OFFSET && mouseEvent.clientX <= bounds.right + BOUNDARY_OFFSET && mouseEvent.clientY >= bounds.top - BOUNDARY_OFFSET && mouseEvent.clientY <= bounds.bottom + BOUNDARY_OFFSET) {
      return;
    }
    setOpen(false, mouseEvent, 'cancel-open');
  });
  React.useEffect(() => {
    if (open && lastOpenChangeReason === 'trigger-hover') {
      const doc = ownerDocument(triggerRef.current);
      doc.addEventListener('mouseup', handleMouseUp, {
        once: true
      });
    }
  }, [open, handleMouseUp, lastOpenChangeReason]);
  const getTriggerProps = React.useCallback(externalProps => {
    return mergeProps({
      'aria-haspopup': 'menu',
      ref: handleRef,
      onMouseDown: event => {
        if (open) {
          return;
        }

        // mousedown -> mouseup on menu item should not trigger it within 200ms.
        allowMouseUpTriggerTimeout.start(200, () => {
          allowMouseUpTriggerRef.current = true;
        });
        const doc = ownerDocument(event.currentTarget);
        doc.addEventListener('mouseup', handleMouseUp, {
          once: true
        });
      }
    }, externalProps, getButtonProps);
  }, [getButtonProps, handleRef, open, allowMouseUpTriggerRef, allowMouseUpTriggerTimeout, handleMouseUp]);
  const state = React.useMemo(() => ({
    disabled,
    open
  }), [disabled, open]);
  const propGetter = React.useCallback(externalProps => mergeProps(rootTriggerProps, externalProps, getTriggerProps), [getTriggerProps, rootTriggerProps]);
  const {
    renderElement
  } = useComponentRenderer({
    render: render || 'button',
    className,
    state,
    propGetter,
    customStyleHookMapping: pressableTriggerOpenStateMapping,
    extraProps: other
  });
  if (parent.type === 'menubar') {
    return /*#__PURE__*/_jsx(CompositeItem, {
      render: renderElement()
    });
  }
  return renderElement();
});
if (process.env.NODE_ENV !== "production") MenuTrigger.displayName = "MenuTrigger";