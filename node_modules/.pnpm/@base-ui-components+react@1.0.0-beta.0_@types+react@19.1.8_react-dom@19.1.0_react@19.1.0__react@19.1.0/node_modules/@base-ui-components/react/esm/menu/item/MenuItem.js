'use client';

import * as React from 'react';
import { useFloatingTree } from '@floating-ui/react';
import { useMenuItem } from "./useMenuItem.js";
import { useMenuRootContext } from "../root/MenuRootContext.js";
import { useComponentRenderer } from "../../utils/useComponentRenderer.js";
import { useBaseUiId } from "../../utils/useBaseUiId.js";
import { useForkRef } from "../../utils/useForkRef.js";
import { useCompositeListItem } from "../../composite/list/useCompositeListItem.js";
import { mergeProps } from "../../merge-props/index.js";
import { jsx as _jsx } from "react/jsx-runtime";
const InnerMenuItem = /*#__PURE__*/React.memo(/*#__PURE__*/React.forwardRef(function InnerMenuItem(props, forwardedRef) {
  const {
    className,
    closeOnClick = true,
    disabled = false,
    highlighted,
    id,
    menuEvents,
    itemProps,
    render,
    allowMouseUpTriggerRef,
    typingRef,
    ...other
  } = props;
  const {
    getItemProps
  } = useMenuItem({
    closeOnClick,
    disabled,
    highlighted,
    id,
    menuEvents,
    ref: forwardedRef,
    allowMouseUpTriggerRef,
    typingRef
  });
  const state = React.useMemo(() => ({
    disabled
  }), [disabled]);
  const {
    renderElement
  } = useComponentRenderer({
    render: render || 'div',
    className,
    state,
    propGetter: externalProps => mergeProps(itemProps, externalProps, getItemProps),
    extraProps: other
  });
  return renderElement();
}));

/**
 * An individual interactive item in the menu.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Menu](https://base-ui.com/react/components/menu)
 */
if (process.env.NODE_ENV !== "production") InnerMenuItem.displayName = "InnerMenuItem";
export const MenuItem = /*#__PURE__*/React.forwardRef(function MenuItem(props, forwardedRef) {
  const {
    id: idProp,
    label,
    ...other
  } = props;
  const itemRef = React.useRef(null);
  const listItem = useCompositeListItem({
    label
  });
  const mergedRef = useForkRef(forwardedRef, listItem.ref, itemRef);
  const {
    itemProps,
    activeIndex,
    allowMouseUpTriggerRef,
    typingRef
  } = useMenuRootContext();
  const id = useBaseUiId(idProp);
  const highlighted = listItem.index === activeIndex;
  const {
    events: menuEvents
  } = useFloatingTree();

  // This wrapper component is used as a performance optimization.
  // MenuItem reads the context and re-renders the actual MenuItem
  // only when it needs to.

  return /*#__PURE__*/_jsx(InnerMenuItem, {
    ...other,
    id: id,
    ref: mergedRef,
    highlighted: highlighted,
    menuEvents: menuEvents,
    itemProps: itemProps,
    allowMouseUpTriggerRef: allowMouseUpTriggerRef,
    typingRef: typingRef
  });
});
if (process.env.NODE_ENV !== "production") MenuItem.displayName = "MenuItem";