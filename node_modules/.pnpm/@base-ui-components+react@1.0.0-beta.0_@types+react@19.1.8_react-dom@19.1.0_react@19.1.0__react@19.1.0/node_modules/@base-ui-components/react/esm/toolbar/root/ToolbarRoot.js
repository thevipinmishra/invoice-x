'use client';

import * as React from 'react';
import { useComponentRenderer } from "../../utils/useComponentRenderer.js";
import { CompositeRoot } from "../../composite/root/CompositeRoot.js";
import { ToolbarRootContext } from "./ToolbarRootContext.js";
import { useToolbarRoot } from "./useToolbarRoot.js";

/**
 * A container for grouping a set of controls, such as buttons, toggle groups, or menus.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Toolbar](https://base-ui.com/react/components/toolbar)
 */
import { jsx as _jsx } from "react/jsx-runtime";
export const ToolbarRoot = /*#__PURE__*/React.forwardRef(function ToolbarRoot(props, forwardedRef) {
  const {
    cols = 1,
    disabled = false,
    loop = true,
    orientation = 'horizontal',
    className,
    render,
    ...otherProps
  } = props;
  const {
    getRootProps,
    disabledIndices,
    setItemMap
  } = useToolbarRoot({
    disabled,
    orientation
  });
  const toolbarRootContext = React.useMemo(() => ({
    disabled,
    orientation,
    setItemMap
  }), [disabled, orientation, setItemMap]);
  const state = React.useMemo(() => ({
    disabled,
    orientation
  }), [disabled, orientation]);
  const {
    renderElement
  } = useComponentRenderer({
    propGetter: getRootProps,
    render: render ?? 'div',
    className,
    state,
    extraProps: otherProps,
    ref: forwardedRef
  });
  return /*#__PURE__*/_jsx(ToolbarRootContext.Provider, {
    value: toolbarRootContext,
    children: /*#__PURE__*/_jsx(CompositeRoot, {
      cols: cols,
      disabledIndices: disabledIndices,
      loop: loop,
      onMapChange: setItemMap,
      orientation: orientation,
      render: renderElement()
    })
  });
});
if (process.env.NODE_ENV !== "production") ToolbarRoot.displayName = "ToolbarRoot";