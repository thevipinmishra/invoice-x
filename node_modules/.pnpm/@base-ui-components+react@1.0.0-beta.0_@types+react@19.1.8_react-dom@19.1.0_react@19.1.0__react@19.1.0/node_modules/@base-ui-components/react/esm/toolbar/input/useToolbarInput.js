'use client';

import * as React from 'react';
import { mergeProps } from "../../merge-props/index.js";
import { useButton } from "../../use-button/index.js";
import { ARROW_LEFT, ARROW_RIGHT, stopEvent } from "../../composite/composite.js";
export function useToolbarInput(parameters) {
  const {
    disabled,
    focusableWhenDisabled,
    ref: externalRef
  } = parameters;
  const {
    getButtonProps
  } = useButton({
    buttonRef: externalRef,
    disabled,
    focusableWhenDisabled,
    type: 'text',
    elementName: 'input'
  });
  const getInputProps = React.useCallback((externalProps = {}) => mergeProps({
    onClick(event) {
      if (disabled) {
        event.preventDefault();
      }
    },
    onKeyDown(event) {
      if (event.key !== ARROW_LEFT && event.key !== ARROW_RIGHT && disabled) {
        stopEvent(event);
      }
    },
    onPointerDown(event) {
      if (disabled) {
        event.preventDefault();
      }
    }
  }, externalProps, getButtonProps), [disabled, getButtonProps]);
  return React.useMemo(() => ({
    getInputProps
  }), [getInputProps]);
}