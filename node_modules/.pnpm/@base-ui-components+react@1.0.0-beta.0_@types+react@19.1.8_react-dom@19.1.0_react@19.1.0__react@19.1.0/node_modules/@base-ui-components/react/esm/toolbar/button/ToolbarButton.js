'use client';

import * as React from 'react';
import { useComponentRenderer } from "../../utils/useComponentRenderer.js";
import { useButton } from "../../use-button/index.js";
import { CompositeItem } from "../../composite/item/CompositeItem.js";
import { useToolbarRootContext } from "../root/ToolbarRootContext.js";
import { useToolbarGroupContext } from "../group/ToolbarGroupContext.js";

/**
 * A button that can be used as-is or as a trigger for other components.
 * Renders a `<button>` element.
 *
 * Documentation: [Base UI Toolbar](https://base-ui.com/react/components/toolbar)
 */
import { jsx as _jsx } from "react/jsx-runtime";
export const ToolbarButton = /*#__PURE__*/React.forwardRef(function ToolbarButton(props, forwardedRef) {
  const {
    className,
    disabled: disabledProp = false,
    focusableWhenDisabled = true,
    render,
    ...otherProps
  } = props;
  const {
    disabled: toolbarDisabled,
    orientation
  } = useToolbarRootContext();
  const groupContext = useToolbarGroupContext(true);
  const itemMetadata = React.useMemo(() => ({
    focusableWhenDisabled
  }), [focusableWhenDisabled]);
  const disabled = toolbarDisabled || (groupContext?.disabled ?? false) || disabledProp;
  const {
    getButtonProps
  } = useButton({
    buttonRef: forwardedRef,
    disabled,
    focusableWhenDisabled
  });
  const state = React.useMemo(() => ({
    disabled,
    orientation,
    focusable: focusableWhenDisabled
  }), [disabled, focusableWhenDisabled, orientation]);
  const {
    renderElement
  } = useComponentRenderer({
    propGetter: getButtonProps,
    render: render ?? 'button',
    state,
    className,
    extraProps: {
      ...otherProps,
      disabled
    }
  });
  return /*#__PURE__*/_jsx(CompositeItem, {
    metadata: itemMetadata,
    render: renderElement()
  });
});
if (process.env.NODE_ENV !== "production") ToolbarButton.displayName = "ToolbarButton";