'use client';

import * as React from 'react';
import { useDialogRootContext } from "../root/DialogRootContext.js";
import { useButton } from "../../use-button/useButton.js";
import { useComponentRenderer } from "../../utils/useComponentRenderer.js";
import { useForkRef } from "../../utils/useForkRef.js";
import { triggerOpenStateMapping } from "../../utils/popupStateMapping.js";

/**
 * A button that opens the dialog.
 * Renders a `<button>` element.
 *
 * Documentation: [Base UI Dialog](https://base-ui.com/react/components/dialog)
 */
export const DialogTrigger = /*#__PURE__*/React.forwardRef(function DialogTrigger(props, forwardedRef) {
  const {
    render,
    className,
    disabled = false,
    ...other
  } = props;
  const {
    open,
    setTriggerElement,
    getTriggerProps
  } = useDialogRootContext();
  const state = React.useMemo(() => ({
    disabled,
    open
  }), [disabled, open]);
  const mergedRef = useForkRef(forwardedRef, setTriggerElement);
  const {
    getButtonProps
  } = useButton({
    disabled,
    buttonRef: mergedRef
  });
  const {
    renderElement
  } = useComponentRenderer({
    render: render ?? 'button',
    className,
    state,
    propGetter: externalProps => getButtonProps(getTriggerProps(externalProps)),
    extraProps: other,
    customStyleHookMapping: triggerOpenStateMapping
  });
  return renderElement();
});
if (process.env.NODE_ENV !== "production") DialogTrigger.displayName = "DialogTrigger";