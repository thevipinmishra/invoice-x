'use client';

import * as React from 'react';
import { mergeProps } from "../../merge-props/index.js";
import { useComponentRenderer } from "../../utils/useComponentRenderer.js";
import { useMeterRootContext } from "../root/MeterRootContext.js";
const EMPTY = {};
/**
 * A text element displaying the current value.
 * Renders a `<span>` element.
 *
 * Documentation: [Base UI Meter](https://base-ui.com/react/components/meter)
 */
export const MeterValue = /*#__PURE__*/React.forwardRef(function MeterValue(props, forwardedRef) {
  const {
    className,
    render,
    children,
    ...otherProps
  } = props;
  const {
    value,
    formattedValue
  } = useMeterRootContext();
  const getValueProps = React.useCallback((externalProps = {}) => mergeProps({
    'aria-hidden': true,
    children: typeof children === 'function' ? children(formattedValue, value) : (formattedValue || value) ?? ''
  }, externalProps), [children, value, formattedValue]);
  const {
    renderElement
  } = useComponentRenderer({
    propGetter: getValueProps,
    render: render ?? 'span',
    className,
    state: EMPTY,
    ref: forwardedRef,
    extraProps: otherProps
  });
  return renderElement();
});
if (process.env.NODE_ENV !== "production") MeterValue.displayName = "MeterValue";