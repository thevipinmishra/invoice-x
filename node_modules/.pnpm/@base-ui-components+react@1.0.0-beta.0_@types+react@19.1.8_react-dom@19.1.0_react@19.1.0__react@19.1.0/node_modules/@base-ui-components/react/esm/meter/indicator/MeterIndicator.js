'use client';

import * as React from 'react';
import { mergeProps } from "../../merge-props/index.js";
import { useComponentRenderer } from "../../utils/useComponentRenderer.js";
import { useMeterRootContext } from "../root/MeterRootContext.js";
const EMPTY = {};
/**
 * Visualizes the position of the value along the range.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Meter](https://base-ui.com/react/components/meter)
 */
export const MeterIndicator = /*#__PURE__*/React.forwardRef(function MeterIndicator(props, forwardedRef) {
  const {
    render,
    className,
    ...otherProps
  } = props;
  const {
    percentageValue
  } = useMeterRootContext();
  const getStyles = React.useCallback(() => {
    return {
      insetInlineStart: 0,
      height: 'inherit',
      width: `${percentageValue}%`
    };
  }, [percentageValue]);
  const propGetter = React.useCallback((externalProps = {}) => mergeProps({
    style: getStyles()
  }, externalProps), [getStyles]);
  const {
    renderElement
  } = useComponentRenderer({
    propGetter,
    render: render ?? 'div',
    state: EMPTY,
    className,
    ref: forwardedRef,
    extraProps: otherProps
  });
  return renderElement();
});
if (process.env.NODE_ENV !== "production") MeterIndicator.displayName = "MeterIndicator";