'use client';

import * as React from 'react';
import { useComponentRenderer } from "../../utils/useComponentRenderer.js";
import { usePreviewCardRootContext } from "../root/PreviewCardContext.js";
import { usePreviewCardPositionerContext } from "../positioner/PreviewCardPositionerContext.js";
import { usePreviewCardPopup } from "./usePreviewCardPopup.js";
import { useForkRef } from "../../utils/useForkRef.js";
import { popupStateMapping as baseMapping } from "../../utils/popupStateMapping.js";
import { mergeProps } from "../../merge-props/index.js";
import { transitionStatusMapping } from "../../utils/styleHookMapping.js";
import { useOpenChangeComplete } from "../../utils/useOpenChangeComplete.js";
const customStyleHookMapping = {
  ...baseMapping,
  ...transitionStatusMapping
};

/**
 * A container for the preview card contents.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Preview Card](https://base-ui.com/react/components/preview-card)
 */
export const PreviewCardPopup = /*#__PURE__*/React.forwardRef(function PreviewCardPopup(props, forwardedRef) {
  const {
    className,
    render,
    ...otherProps
  } = props;
  const {
    open,
    transitionStatus,
    getRootPopupProps,
    popupRef,
    onOpenChangeComplete
  } = usePreviewCardRootContext();
  const {
    side,
    align
  } = usePreviewCardPositionerContext();
  useOpenChangeComplete({
    open,
    ref: popupRef,
    onComplete() {
      if (open) {
        onOpenChangeComplete?.(true);
      }
    }
  });
  const {
    getPopupProps
  } = usePreviewCardPopup({
    getProps: getRootPopupProps
  });
  const state = React.useMemo(() => ({
    open,
    side,
    align,
    transitionStatus
  }), [open, side, align, transitionStatus]);
  const mergedRef = useForkRef(popupRef, forwardedRef);
  const {
    renderElement
  } = useComponentRenderer({
    propGetter: getPopupProps,
    ref: mergedRef,
    render: render ?? 'div',
    className,
    state,
    extraProps: transitionStatus === 'starting' ? mergeProps({
      style: {
        transition: 'none'
      }
    }, otherProps) : otherProps,
    customStyleHookMapping
  });
  return renderElement();
});
if (process.env.NODE_ENV !== "production") PreviewCardPopup.displayName = "PreviewCardPopup";