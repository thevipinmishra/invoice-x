'use client';

import * as React from 'react';
import { useComponentRenderer } from "../../utils/useComponentRenderer.js";
import { usePreviewCardRootContext } from "../root/PreviewCardContext.js";
import { usePreviewCardPositioner } from "./usePreviewCardPositioner.js";
import { PreviewCardPositionerContext } from "./PreviewCardPositionerContext.js";
import { useForkRef } from "../../utils/useForkRef.js";
import { popupStateMapping } from "../../utils/popupStateMapping.js";
import { usePreviewCardPortalContext } from "../portal/PreviewCardPortalContext.js";
import { POPUP_COLLISION_AVOIDANCE } from "../../utils/constants.js";

/**
 * Positions the popup against the trigger.
 * Renders a `<div>` element.
 *
 * Documentation: [Base UI Preview Card](https://base-ui.com/react/components/preview-card)
 */
import { jsx as _jsx } from "react/jsx-runtime";
export const PreviewCardPositioner = /*#__PURE__*/React.forwardRef(function PreviewCardPositioner(props, forwardedRef) {
  const {
    render,
    className,
    anchor,
    positionMethod = 'absolute',
    side = 'bottom',
    align = 'center',
    sideOffset = 0,
    alignOffset = 0,
    collisionBoundary = 'clipping-ancestors',
    collisionPadding = 5,
    arrowPadding = 5,
    sticky = false,
    trackAnchor = true,
    collisionAvoidance = POPUP_COLLISION_AVOIDANCE,
    ...otherProps
  } = props;
  const {
    open,
    mounted,
    floatingRootContext,
    setPositionerElement
  } = usePreviewCardRootContext();
  const keepMounted = usePreviewCardPortalContext();
  const positioner = usePreviewCardPositioner({
    anchor,
    floatingRootContext,
    positionMethod,
    mounted,
    side,
    sideOffset,
    align,
    alignOffset,
    arrowPadding,
    collisionBoundary,
    collisionPadding,
    sticky,
    trackAnchor,
    keepMounted,
    collisionAvoidance
  });
  const state = React.useMemo(() => ({
    open,
    side: positioner.side,
    align: positioner.align,
    anchorHidden: positioner.anchorHidden
  }), [open, positioner.side, positioner.align, positioner.anchorHidden]);
  const contextValue = React.useMemo(() => ({
    side: positioner.side,
    align: positioner.align,
    arrowRef: positioner.arrowRef,
    arrowUncentered: positioner.arrowUncentered,
    arrowStyles: positioner.arrowStyles
  }), [positioner.side, positioner.align, positioner.arrowRef, positioner.arrowUncentered, positioner.arrowStyles]);
  const mergedRef = useForkRef(setPositionerElement, forwardedRef);
  const {
    renderElement
  } = useComponentRenderer({
    propGetter: positioner.getPositionerProps,
    render: render ?? 'div',
    className,
    state,
    ref: mergedRef,
    extraProps: otherProps,
    customStyleHookMapping: popupStateMapping
  });
  return /*#__PURE__*/_jsx(PreviewCardPositionerContext.Provider, {
    value: contextValue,
    children: renderElement()
  });
});
if (process.env.NODE_ENV !== "production") PreviewCardPositioner.displayName = "PreviewCardPositioner";