'use client';

import * as React from 'react';
import { useControlled } from "../../utils/useControlled.js";
import { visuallyHidden } from "../../utils/visuallyHidden.js";
import { useForkRef } from "../../utils/useForkRef.js";
import { mergeProps } from "../../merge-props/index.js";
import { useBaseUiId } from "../../utils/useBaseUiId.js";
import { useEventCallback } from "../../utils/useEventCallback.js";
import { useModernLayoutEffect } from "../../utils/useModernLayoutEffect.js";
import { useButton } from "../../use-button/useButton.js";
import { useFieldRootContext } from "../../field/root/FieldRootContext.js";
import { useFieldControlValidation } from "../../field/control/useFieldControlValidation.js";
import { useField } from "../../field/useField.js";
import { useCheckboxGroupContext } from "../../checkbox-group/CheckboxGroupContext.js";
import { useFormContext } from "../../form/FormContext.js";
const EMPTY = {};
export const PARENT_CHECKBOX = 'data-parent';
export function useCheckboxRoot(params) {
  const {
    id: idProp,
    checked: externalChecked,
    inputRef: externalInputRef,
    onCheckedChange: onCheckedChangeProp,
    name: nameProp,
    value: valueProp,
    defaultChecked = false,
    readOnly = false,
    required = false,
    indeterminate = false,
    parent = false,
    disabled: disabledProp = false
  } = params;
  const buttonRef = React.useRef(null);
  const groupContext = useCheckboxGroupContext();
  const groupValue = groupContext?.value;
  const setGroupValue = groupContext?.setValue;
  const defaultGroupValue = groupContext?.defaultValue;
  const {
    clearErrors
  } = useFormContext();
  const {
    labelId,
    setControlId,
    setTouched,
    setDirty,
    validityData,
    setFilled,
    setFocused,
    validationMode,
    disabled: fieldDisabled,
    name: fieldName
  } = useFieldRootContext();
  const disabled = fieldDisabled || disabledProp;
  const name = fieldName ?? nameProp;
  const value = valueProp ?? name;
  const {
    getButtonProps
  } = useButton({
    disabled,
    buttonRef
  });
  const localFieldControlValidation = useFieldControlValidation();
  const fieldControlValidation = groupContext?.fieldControlValidation ?? localFieldControlValidation;
  const [checked, setCheckedState] = useControlled({
    controlled: value && groupValue && !parent ? groupValue.includes(value) : externalChecked,
    default: value && defaultGroupValue && !parent ? defaultGroupValue.includes(value) : defaultChecked,
    name: 'Checkbox',
    state: 'checked'
  });
  const onCheckedChange = useEventCallback(onCheckedChangeProp);
  const id = useBaseUiId(idProp);
  useModernLayoutEffect(() => {
    setControlId(id);
    return () => {
      setControlId(undefined);
    };
  }, [id, setControlId]);
  useField({
    enabled: !groupContext,
    id,
    commitValidation: fieldControlValidation.commitValidation,
    value: checked,
    controlRef: buttonRef
  });
  const inputRef = React.useRef(null);
  const mergedInputRef = useForkRef(externalInputRef, inputRef, fieldControlValidation.inputRef);
  useModernLayoutEffect(() => {
    if (inputRef.current) {
      inputRef.current.indeterminate = indeterminate;
      if (checked) {
        setFilled(true);
      }
    }
  }, [checked, indeterminate, setFilled]);
  const getRootProps = React.useCallback((externalProps = {}) => mergeProps({
    id,
    ref: buttonRef,
    role: 'checkbox',
    disabled,
    'aria-checked': indeterminate ? 'mixed' : checked,
    'aria-readonly': readOnly || undefined,
    'aria-required': required || undefined,
    'aria-labelledby': labelId,
    [PARENT_CHECKBOX]: parent ? '' : undefined,
    onFocus() {
      setFocused(true);
    },
    onBlur() {
      const element = inputRef.current;
      if (!element) {
        return;
      }
      setTouched(true);
      setFocused(false);
      if (validationMode === 'onBlur') {
        fieldControlValidation.commitValidation(groupContext ? groupValue : element.checked);
      }
    },
    onClick(event) {
      if (event.defaultPrevented || readOnly) {
        return;
      }
      event.preventDefault();
      inputRef.current?.click();
    }
  }, fieldControlValidation.getValidationProps(externalProps), getButtonProps), [getButtonProps, id, disabled, indeterminate, checked, readOnly, required, labelId, setFocused, setTouched, validationMode, groupContext, groupValue, fieldControlValidation, parent]);
  const getInputProps = React.useCallback((externalProps = {}) => mergeProps({
    checked,
    disabled,
    name: parent ? undefined : name,
    // React <19 sets an empty value if `undefined` is passed explicitly
    // To avoid this, we only set the value if it's defined
    ...(valueProp !== undefined ? {
      value: (groupContext ? checked && valueProp : valueProp) || ''
    } : EMPTY),
    required,
    ref: mergedInputRef,
    style: visuallyHidden,
    tabIndex: -1,
    type: 'checkbox',
    'aria-hidden': true,
    onChange(event) {
      // Workaround for https://github.com/facebook/react/issues/9023
      if (event.nativeEvent.defaultPrevented) {
        return;
      }
      const nextChecked = event.target.checked;
      setDirty(nextChecked !== validityData.initialValue);
      setCheckedState(nextChecked);
      onCheckedChange?.(nextChecked, event.nativeEvent);
      clearErrors(name);
      if (!groupContext) {
        setFilled(nextChecked);
        if (validationMode === 'onChange') {
          fieldControlValidation.commitValidation(nextChecked);
        } else {
          fieldControlValidation.commitValidation(nextChecked, true);
        }
      }
      if (value && groupValue && setGroupValue && !parent) {
        const nextGroupValue = nextChecked ? [...groupValue, value] : groupValue.filter(item => item !== value);
        setGroupValue(nextGroupValue, event.nativeEvent);
        setFilled(nextGroupValue.length > 0);
        if (validationMode === 'onChange') {
          fieldControlValidation.commitValidation(nextGroupValue);
        } else {
          fieldControlValidation.commitValidation(nextGroupValue, true);
        }
      }
    }
  }, groupContext ? fieldControlValidation.getValidationProps(externalProps) : fieldControlValidation.getInputValidationProps(externalProps)), [checked, disabled, name, valueProp, required, mergedInputRef, setDirty, validityData.initialValue, setCheckedState, onCheckedChange, clearErrors, groupContext, groupValue, setGroupValue, parent, setFilled, validationMode, value, fieldControlValidation]);
  return React.useMemo(() => ({
    checked,
    getRootProps,
    getInputProps
  }), [checked, getRootProps, getInputProps]);
}