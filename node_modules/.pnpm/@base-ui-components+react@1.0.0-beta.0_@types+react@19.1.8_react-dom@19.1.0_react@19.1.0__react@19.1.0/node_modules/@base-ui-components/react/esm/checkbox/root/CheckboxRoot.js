'use client';

import * as React from 'react';
import { useCheckboxGroupContext } from "../../checkbox-group/CheckboxGroupContext.js";
import { useFieldRootContext } from "../../field/root/FieldRootContext.js";
import { useComponentRenderer } from "../../utils/useComponentRenderer.js";
import { useCustomStyleHookMapping } from "../utils/useCustomStyleHookMapping.js";
import { useForkRef } from "../../utils/useForkRef.js";
import { useCheckboxRoot } from "./useCheckboxRoot.js";
import { CheckboxRootContext } from "./CheckboxRootContext.js";

/**
 * Represents the checkbox itself.
 * Renders a `<button>` element and a hidden `<input>` beside.
 *
 * Documentation: [Base UI Checkbox](https://base-ui.com/react/components/checkbox)
 */
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
export const CheckboxRoot = /*#__PURE__*/React.forwardRef(function CheckboxRoot(props, forwardedRef) {
  const {
    name,
    onCheckedChange,
    defaultChecked,
    parent = false,
    readOnly = false,
    indeterminate = false,
    required = false,
    disabled: disabledProp = false,
    checked: checkedProp,
    render,
    className,
    inputRef,
    value: valueProp,
    ...otherProps
  } = props;
  const groupContext = useCheckboxGroupContext();
  const parentContext = groupContext?.parent;
  const isGrouped = parentContext && groupContext.allValues;
  const value = valueProp ?? name;
  let groupProps = {};
  if (isGrouped) {
    if (parent) {
      groupProps = groupContext.parent.getParentProps();
    } else if (value) {
      groupProps = groupContext.parent.getChildProps(value);
    }
  }
  const {
    checked: groupChecked = checkedProp,
    indeterminate: groupIndeterminate = indeterminate,
    onCheckedChange: groupOnChange = onCheckedChange,
    ...otherGroupProps
  } = groupProps;
  const {
    state: fieldState,
    disabled: fieldDisabled
  } = useFieldRootContext();
  const disabled = fieldDisabled || groupContext?.disabled || disabledProp;
  const {
    checked,
    getInputProps,
    getRootProps
  } = useCheckboxRoot({
    ...props,
    disabled,
    inputRef,
    checked: groupChecked,
    indeterminate: groupIndeterminate,
    onCheckedChange: groupOnChange
  });
  const computedChecked = isGrouped ? Boolean(groupChecked) : checked;
  const computedIndeterminate = isGrouped ? groupIndeterminate || indeterminate : indeterminate;
  React.useEffect(() => {
    if (parentContext && name) {
      parentContext.disabledStatesRef.current.set(name, disabled);
    }
  }, [parentContext, disabled, name]);
  const mergedRef = useForkRef(forwardedRef, groupContext?.registerControlRef);
  const state = React.useMemo(() => ({
    ...fieldState,
    checked: computedChecked,
    disabled,
    readOnly,
    required,
    indeterminate: computedIndeterminate
  }), [fieldState, computedChecked, disabled, readOnly, required, computedIndeterminate]);
  const customStyleHookMapping = useCustomStyleHookMapping(state);
  const {
    renderElement
  } = useComponentRenderer({
    propGetter: getRootProps,
    render: render ?? 'button',
    ref: mergedRef,
    state,
    className,
    customStyleHookMapping,
    extraProps: {
      ...otherProps,
      ...otherGroupProps
    }
  });
  return /*#__PURE__*/_jsxs(CheckboxRootContext.Provider, {
    value: state,
    children: [renderElement(), !checked && !groupContext && props.name && !parent && /*#__PURE__*/_jsx("input", {
      type: "hidden",
      name: props.name,
      value: "off"
    }), /*#__PURE__*/_jsx("input", {
      ...getInputProps()
    })]
  });
});
if (process.env.NODE_ENV !== "production") CheckboxRoot.displayName = "CheckboxRoot";