{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["import { z } from 'zod'\nimport type { ValidatorAdapter } from '@tanstack/react-router'\n\nexport interface ZodTypeLike {\n  _input: any\n  _output: any\n  parse: (input: any) => any\n}\n\nexport type InputOutputOption = 'input' | 'output'\n\nexport interface zodValidatorOptions {\n  readonly schema: ZodTypeLike\n  readonly input?: InputOutputOption\n  readonly output?: InputOutputOption\n}\n\nexport type zodValidatorInput<\n  TOptions extends ZodTypeLike | zodValidatorOptions,\n> = TOptions extends zodValidatorOptions\n  ? 'input' extends TOptions['input']\n    ? TOptions['schema']['_input']\n    : TOptions['schema']['_output']\n  : TOptions extends ZodTypeLike\n    ? TOptions['_input']\n    : never\n\nexport type zodValidatorOutput<\n  TOptions extends ZodTypeLike | zodValidatorOptions,\n> = TOptions extends zodValidatorOptions\n  ? 'output' extends TOptions['output']\n    ? TOptions['schema']['_output']\n    : TOptions['schema']['_input']\n  : TOptions extends ZodTypeLike\n    ? TOptions['_output']\n    : never\n\nexport type zodValidatorAdapter<\n  TOptions extends ZodTypeLike | zodValidatorOptions,\n> = ValidatorAdapter<zodValidatorInput<TOptions>, zodValidatorOutput<TOptions>>\n\nexport const zodValidator = <\n  TOptions extends ZodTypeLike | zodValidatorOptions,\n>(\n  options: TOptions,\n): zodValidatorAdapter<TOptions> => {\n  const input = 'input' in options ? options.input : 'input'\n  const output = 'output' in options ? options.output : 'output'\n  const _input = 'schema' in options ? options.schema._input : options._input\n  const _output = 'schema' in options ? options.schema._output : options._output\n  return {\n    types: {\n      input: input === 'output' ? _output : _input,\n      output: output === 'input' ? _input : _output,\n    },\n    parse: (input) =>\n      'schema' in options ? options.schema.parse(input) : options.parse(input),\n  }\n}\n\nexport const fallback = <TSchema extends z.ZodTypeAny>(\n  schema: TSchema,\n  fallback: TSchema['_input'],\n): z.ZodPipeline<\n  z.ZodType<TSchema['_input'], z.ZodTypeDef, TSchema['_input']>,\n  z.ZodCatch<TSchema>\n> => {\n  return z.custom<TSchema['_input']>().pipe(schema.catch(fallback))\n}\n"],"names":["input","fallback"],"mappings":";AAyCa,MAAA,eAAe,CAG1B,YACkC;AAClC,QAAM,QAAQ,WAAW,UAAU,QAAQ,QAAQ;AACnD,QAAM,SAAS,YAAY,UAAU,QAAQ,SAAS;AACtD,QAAM,SAAS,YAAY,UAAU,QAAQ,OAAO,SAAS,QAAQ;AACrE,QAAM,UAAU,YAAY,UAAU,QAAQ,OAAO,UAAU,QAAQ;AAChE,SAAA;AAAA,IACL,OAAO;AAAA,MACL,OAAO,UAAU,WAAW,UAAU;AAAA,MACtC,QAAQ,WAAW,UAAU,SAAS;AAAA,IACxC;AAAA,IACA,OAAO,CAACA,WACN,YAAY,UAAU,QAAQ,OAAO,MAAMA,MAAK,IAAI,QAAQ,MAAMA,MAAK;AAAA,EAC3E;AACF;AAEa,MAAA,WAAW,CACtB,QACAC,cAIG;AACH,SAAO,EAAE,SAA4B,KAAK,OAAO,MAAMA,SAAQ,CAAC;AAClE;"}