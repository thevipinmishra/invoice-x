import { z } from 'zod';
import { ValidatorAdapter } from '@tanstack/react-router';
export interface ZodTypeLike {
    _input: any;
    _output: any;
    parse: (input: any) => any;
}
export type InputOutputOption = 'input' | 'output';
export interface zodValidatorOptions {
    readonly schema: ZodTypeLike;
    readonly input?: InputOutputOption;
    readonly output?: InputOutputOption;
}
export type zodValidatorInput<TOptions extends ZodTypeLike | zodValidatorOptions> = TOptions extends zodValidatorOptions ? 'input' extends TOptions['input'] ? TOptions['schema']['_input'] : TOptions['schema']['_output'] : TOptions extends ZodTypeLike ? TOptions['_input'] : never;
export type zodValidatorOutput<TOptions extends ZodTypeLike | zodValidatorOptions> = TOptions extends zodValidatorOptions ? 'output' extends TOptions['output'] ? TOptions['schema']['_output'] : TOptions['schema']['_input'] : TOptions extends ZodTypeLike ? TOptions['_output'] : never;
export type zodValidatorAdapter<TOptions extends ZodTypeLike | zodValidatorOptions> = ValidatorAdapter<zodValidatorInput<TOptions>, zodValidatorOutput<TOptions>>;
export declare const zodValidator: <TOptions extends ZodTypeLike | zodValidatorOptions>(options: TOptions) => zodValidatorAdapter<TOptions>;
export declare const fallback: <TSchema extends z.ZodTypeAny>(schema: TSchema, fallback: TSchema["_input"]) => z.ZodPipeline<z.ZodType<TSchema["_input"], z.ZodTypeDef, TSchema["_input"]>, z.ZodCatch<TSchema>>;
