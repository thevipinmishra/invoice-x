{"mappings":"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","sources":["packages/react-aria-components/src/Toast.tsx"],"sourcesContent":["/*\n * Copyright 2025 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaToastProps, AriaToastRegionProps, mergeProps, useFocusRing, useHover, useLocale, useToast, useToastRegion} from 'react-aria';\nimport {ButtonContext} from './Button';\nimport {ContextValue, DEFAULT_SLOT, Provider, RenderProps, StyleRenderProps, useContextProps, useRenderProps} from './utils';\nimport {createPortal} from 'react-dom';\nimport {forwardRefType} from '@react-types/shared';\nimport {QueuedToast, ToastQueue, ToastState, useToastQueue} from 'react-stately';\nimport React, {createContext, ForwardedRef, forwardRef, HTMLAttributes, JSX, ReactElement, ReactNode, useContext} from 'react';\nimport {TextContext} from './Text';\nimport {useIsSSR} from '@react-aria/ssr';\nimport {useObjectRef} from '@react-aria/utils';\nimport {useUNSAFE_PortalContext} from '@react-aria/overlays';\n\nexport const ToastStateContext = createContext<ToastState<any> | null>(null);\n\nexport interface ToastRegionRenderProps<T> {\n  /** A list of all currently visible toasts. */\n  visibleToasts: QueuedToast<T>[],\n  /**\n   * Whether the toast region is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean,\n  /**\n   * Whether the toast region is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the toast region is keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean\n}\n\nexport interface ToastRegionProps<T> extends AriaToastRegionProps, StyleRenderProps<ToastRegionRenderProps<T>> {\n  /** The queue of toasts to display. */\n  queue: ToastQueue<T>,\n  /** A function to render each toast, or children containing a `<ToastList>`. */\n  children: ReactNode | ((renderProps: {toast: QueuedToast<T>}) => ReactElement)\n}\n\n/**\n * A ToastRegion displays one or more toast notifications.\n */\nexport const ToastRegion = /*#__PURE__*/ (forwardRef as forwardRefType)(function ToastRegion<T>(props: ToastRegionProps<T>, ref: ForwardedRef<HTMLDivElement>): JSX.Element | null {\n  let isSSR = useIsSSR();\n  let state = useToastQueue(props.queue);\n  let objectRef = useObjectRef(ref);\n  let {regionProps} = useToastRegion(props, state, objectRef);\n\n  let {focusProps, isFocused, isFocusVisible} = useFocusRing();\n  let {hoverProps, isHovered} = useHover({});\n  let renderProps = useRenderProps({\n    ...props,\n    children: undefined,\n    defaultClassName: 'react-aria-ToastRegion',\n    values: {\n      visibleToasts: state.visibleToasts,\n      isHovered,\n      isFocused,\n      isFocusVisible\n    }\n  });\n\n  let {direction} = useLocale();\n  let portalContainer;\n  let {getContainer} = useUNSAFE_PortalContext();\n  if (!isSSR) {\n    portalContainer = document.body;\n    if (getContainer) {\n      portalContainer = getContainer();\n    }\n  }\n\n  let region = (\n    <ToastStateContext.Provider value={state}>\n      <div\n        {...renderProps}\n        {...mergeProps(regionProps, focusProps, hoverProps)}\n        dir={direction}\n        ref={objectRef}\n        data-hovered={isHovered || undefined}\n        data-focused={isFocused || undefined}\n        data-focus-visible={isFocusVisible || undefined}>\n        {typeof props.children === 'function' ? <ToastList {...props} className={undefined} style={{display: 'contents'}}>{props.children}</ToastList> : props.children}\n      </div>\n    </ToastStateContext.Provider>\n  );\n\n  return state.visibleToasts.length > 0 && portalContainer\n    ? createPortal(region, portalContainer)\n    : null;\n});\n\nexport interface ToastListProps<T> extends Omit<ToastRegionProps<T>, 'queue' | 'children'> {\n  /** A function to render each toast. */\n  children: (renderProps: {toast: QueuedToast<T>}) => ReactElement\n}\n\nexport const ToastList = /*#__PURE__*/ (forwardRef as forwardRefType)(function ToastList<T>(props: ToastListProps<T>, ref: ForwardedRef<HTMLOListElement>) {\n  let state = useContext(ToastStateContext)!;\n  let {hoverProps, isHovered} = useHover({});\n  let renderProps = useRenderProps({\n    ...props,\n    children: undefined,\n    defaultClassName: 'react-aria-ToastList',\n    values: {\n      visibleToasts: state.visibleToasts,\n      isFocused: false,\n      isFocusVisible: false,\n      isHovered\n    }\n  });\n\n  return (\n    <ol {...hoverProps} {...renderProps} ref={ref}>\n      {state.visibleToasts.map((toast) => (\n        <li key={toast.key} style={{display: 'contents'}}>\n          {props.children({toast})}\n        </li>\n      ))}\n    </ol>\n  );\n});\n\nexport interface ToastRenderProps<T> {\n  /**\n   * The toast object to display.\n   */\n  toast: QueuedToast<T>,\n  /**\n   * Whether the toast is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the toast is keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean\n}\n\nexport interface ToastProps<T> extends AriaToastProps<T>, RenderProps<ToastRenderProps<T>> {}\n\n/**\n * A Toast displays a brief, temporary notification of actions, errors, or other events in an application.\n */\nexport const Toast = /*#__PURE__*/ (forwardRef as forwardRefType)(function Toast<T>(props: ToastProps<T>, ref: ForwardedRef<HTMLDivElement>) {\n  let state = useContext(ToastStateContext)!;\n  let objectRef = useObjectRef(ref);\n  let {toastProps, contentProps, titleProps, descriptionProps, closeButtonProps} = useToast(\n    props,\n    state,\n    objectRef\n  );\n\n  let {focusProps, isFocused, isFocusVisible} = useFocusRing();\n  let renderProps = useRenderProps({\n    ...props,\n    defaultClassName: 'react-aria-Toast',\n    values: {\n      toast: props.toast,\n      isFocused,\n      isFocusVisible\n    }\n  });\n\n  return (\n    <div\n      {...renderProps}\n      {...mergeProps(toastProps, focusProps)}\n      ref={objectRef}\n      data-focused={isFocused || undefined}\n      data-focus-visible={isFocusVisible || undefined}>\n      <Provider\n        values={[\n          [ToastContentContext, contentProps],\n          [TextContext, {\n            slots: {\n              [DEFAULT_SLOT]: {},\n              title: titleProps,\n              description: descriptionProps\n            }\n          }],\n          [ButtonContext, {\n            slots: {\n              [DEFAULT_SLOT]: {},\n              close: closeButtonProps\n            }\n          }]\n        ]}>\n        {renderProps.children}\n      </Provider>\n    </div>\n  );\n});\n\nexport const ToastContentContext = createContext<ContextValue<HTMLAttributes<HTMLElement>, HTMLDivElement>>({});\n\n/**\n * ToastContent wraps the main content of a toast notification.\n */\nexport const ToastContent = /*#__PURE__*/ forwardRef(function ToastContent(props: HTMLAttributes<HTMLElement>, ref: ForwardedRef<HTMLDivElement>) {\n  [props, ref] = useContextProps(props, ref, ToastContentContext);\n  return (\n    <div className=\"react-aria-ToastContent\" {...props} ref={ref}>\n      {props.children}\n    </div>\n  );\n});\n"],"names":[],"version":3,"file":"Toast.main.js.map"}