/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as CompsRouteImport } from './routes/comps'
import { Route as DashboardRouteRouteImport } from './routes/_dashboard/route'
import { Route as DashboardIndexRouteImport } from './routes/_dashboard/index'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as DashboardInvoicesRouteImport } from './routes/_dashboard/invoices'
import { Route as DashboardInvoiceRouteImport } from './routes/_dashboard/invoice'
import { Route as DashboardCreateRouteImport } from './routes/_dashboard/create'
import { Route as DashboardClientsRouteImport } from './routes/_dashboard/clients'

const CompsRoute = CompsRouteImport.update({
  id: '/comps',
  path: '/comps',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardInvoicesRoute = DashboardInvoicesRouteImport.update({
  id: '/invoices',
  path: '/invoices',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardInvoiceRoute = DashboardInvoiceRouteImport.update({
  id: '/invoice',
  path: '/invoice',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardCreateRoute = DashboardCreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardClientsRoute = DashboardClientsRouteImport.update({
  id: '/clients',
  path: '/clients',
  getParentRoute: () => DashboardRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/comps': typeof CompsRoute
  '/clients': typeof DashboardClientsRoute
  '/create': typeof DashboardCreateRoute
  '/invoice': typeof DashboardInvoiceRoute
  '/invoices': typeof DashboardInvoicesRoute
  '/auth/login': typeof AuthLoginRoute
  '/': typeof DashboardIndexRoute
}
export interface FileRoutesByTo {
  '/comps': typeof CompsRoute
  '/clients': typeof DashboardClientsRoute
  '/create': typeof DashboardCreateRoute
  '/invoice': typeof DashboardInvoiceRoute
  '/invoices': typeof DashboardInvoicesRoute
  '/auth/login': typeof AuthLoginRoute
  '/': typeof DashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_dashboard': typeof DashboardRouteRouteWithChildren
  '/comps': typeof CompsRoute
  '/_dashboard/clients': typeof DashboardClientsRoute
  '/_dashboard/create': typeof DashboardCreateRoute
  '/_dashboard/invoice': typeof DashboardInvoiceRoute
  '/_dashboard/invoices': typeof DashboardInvoicesRoute
  '/auth/login': typeof AuthLoginRoute
  '/_dashboard/': typeof DashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/comps'
    | '/clients'
    | '/create'
    | '/invoice'
    | '/invoices'
    | '/auth/login'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/comps'
    | '/clients'
    | '/create'
    | '/invoice'
    | '/invoices'
    | '/auth/login'
    | '/'
  id:
    | '__root__'
    | '/_dashboard'
    | '/comps'
    | '/_dashboard/clients'
    | '/_dashboard/create'
    | '/_dashboard/invoice'
    | '/_dashboard/invoices'
    | '/auth/login'
    | '/_dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  CompsRoute: typeof CompsRoute
  AuthLoginRoute: typeof AuthLoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/comps': {
      id: '/comps'
      path: '/comps'
      fullPath: '/comps'
      preLoaderRoute: typeof CompsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/': {
      id: '/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/invoices': {
      id: '/_dashboard/invoices'
      path: '/invoices'
      fullPath: '/invoices'
      preLoaderRoute: typeof DashboardInvoicesRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/invoice': {
      id: '/_dashboard/invoice'
      path: '/invoice'
      fullPath: '/invoice'
      preLoaderRoute: typeof DashboardInvoiceRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/create': {
      id: '/_dashboard/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof DashboardCreateRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/clients': {
      id: '/_dashboard/clients'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof DashboardClientsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
  }
}

interface DashboardRouteRouteChildren {
  DashboardClientsRoute: typeof DashboardClientsRoute
  DashboardCreateRoute: typeof DashboardCreateRoute
  DashboardInvoiceRoute: typeof DashboardInvoiceRoute
  DashboardInvoicesRoute: typeof DashboardInvoicesRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardClientsRoute: DashboardClientsRoute,
  DashboardCreateRoute: DashboardCreateRoute,
  DashboardInvoiceRoute: DashboardInvoiceRoute,
  DashboardInvoicesRoute: DashboardInvoicesRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  CompsRoute: CompsRoute,
  AuthLoginRoute: AuthLoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
